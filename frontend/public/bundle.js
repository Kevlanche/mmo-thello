/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/base64-js/index.js":
/*!*****************************************!*\
  !*** ./node_modules/base64-js/index.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(\n      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\n    ))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n\n\n//# sourceURL=webpack:///./node_modules/base64-js/index.js?");

/***/ }),

/***/ "./node_modules/buffer/index.js":
/*!**************************************!*\
  !*** ./node_modules/buffer/index.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(global) {/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n\n\nvar base64 = __webpack_require__(/*! base64-js */ \"./node_modules/base64-js/index.js\")\nvar ieee754 = __webpack_require__(/*! ieee754 */ \"./node_modules/ieee754/index.js\")\nvar isArray = __webpack_require__(/*! isarray */ \"./node_modules/isarray/index.js\")\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))\n\n//# sourceURL=webpack:///./node_modules/buffer/index.js?");

/***/ }),

/***/ "./node_modules/ieee754/index.js":
/*!***************************************!*\
  !*** ./node_modules/ieee754/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n\n\n//# sourceURL=webpack:///./node_modules/ieee754/index.js?");

/***/ }),

/***/ "./node_modules/isarray/index.js":
/*!***************************************!*\
  !*** ./node_modules/isarray/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n\n\n//# sourceURL=webpack:///./node_modules/isarray/index.js?");

/***/ }),

/***/ "./node_modules/long/src/long.js":
/*!***************************************!*\
  !*** ./node_modules/long/src/long.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n\n\n//# sourceURL=webpack:///./node_modules/long/src/long.js?");

/***/ }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n\n//# sourceURL=webpack:///./node_modules/process/browser.js?");

/***/ }),

/***/ "./node_modules/safe-buffer/index.js":
/*!*******************************************!*\
  !*** ./node_modules/safe-buffer/index.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* eslint-disable node/no-deprecated-api */\nvar buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")\nvar Buffer = buffer.Buffer\n\n// alternative to using Object.keys for old browsers\nfunction copyProps (src, dst) {\n  for (var key in src) {\n    dst[key] = src[key]\n  }\n}\nif (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {\n  module.exports = buffer\n} else {\n  // Copy properties from require('buffer')\n  copyProps(buffer, exports)\n  exports.Buffer = SafeBuffer\n}\n\nfunction SafeBuffer (arg, encodingOrOffset, length) {\n  return Buffer(arg, encodingOrOffset, length)\n}\n\n// Copy static methods from Buffer\ncopyProps(Buffer, SafeBuffer)\n\nSafeBuffer.from = function (arg, encodingOrOffset, length) {\n  if (typeof arg === 'number') {\n    throw new TypeError('Argument must not be a number')\n  }\n  return Buffer(arg, encodingOrOffset, length)\n}\n\nSafeBuffer.alloc = function (size, fill, encoding) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  var buf = Buffer(size)\n  if (fill !== undefined) {\n    if (typeof encoding === 'string') {\n      buf.fill(fill, encoding)\n    } else {\n      buf.fill(fill)\n    }\n  } else {\n    buf.fill(0)\n  }\n  return buf\n}\n\nSafeBuffer.allocUnsafe = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return Buffer(size)\n}\n\nSafeBuffer.allocUnsafeSlow = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return buffer.SlowBuffer(size)\n}\n\n\n//# sourceURL=webpack:///./node_modules/safe-buffer/index.js?");

/***/ }),

/***/ "./node_modules/string_decoder/lib/string_decoder.js":
/*!***********************************************************!*\
  !*** ./node_modules/string_decoder/lib/string_decoder.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\n/*<replacement>*/\n\nvar Buffer = __webpack_require__(/*! safe-buffer */ \"./node_modules/safe-buffer/index.js\").Buffer;\n/*</replacement>*/\n\nvar isEncoding = Buffer.isEncoding || function (encoding) {\n  encoding = '' + encoding;\n  switch (encoding && encoding.toLowerCase()) {\n    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':\n      return true;\n    default:\n      return false;\n  }\n};\n\nfunction _normalizeEncoding(enc) {\n  if (!enc) return 'utf8';\n  var retried;\n  while (true) {\n    switch (enc) {\n      case 'utf8':\n      case 'utf-8':\n        return 'utf8';\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return 'utf16le';\n      case 'latin1':\n      case 'binary':\n        return 'latin1';\n      case 'base64':\n      case 'ascii':\n      case 'hex':\n        return enc;\n      default:\n        if (retried) return; // undefined\n        enc = ('' + enc).toLowerCase();\n        retried = true;\n    }\n  }\n};\n\n// Do not cache `Buffer.isEncoding` when checking encoding names as some\n// modules monkey-patch it to support additional encodings\nfunction normalizeEncoding(enc) {\n  var nenc = _normalizeEncoding(enc);\n  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);\n  return nenc || enc;\n}\n\n// StringDecoder provides an interface for efficiently splitting a series of\n// buffers into a series of JS strings without breaking apart multi-byte\n// characters.\nexports.StringDecoder = StringDecoder;\nfunction StringDecoder(encoding) {\n  this.encoding = normalizeEncoding(encoding);\n  var nb;\n  switch (this.encoding) {\n    case 'utf16le':\n      this.text = utf16Text;\n      this.end = utf16End;\n      nb = 4;\n      break;\n    case 'utf8':\n      this.fillLast = utf8FillLast;\n      nb = 4;\n      break;\n    case 'base64':\n      this.text = base64Text;\n      this.end = base64End;\n      nb = 3;\n      break;\n    default:\n      this.write = simpleWrite;\n      this.end = simpleEnd;\n      return;\n  }\n  this.lastNeed = 0;\n  this.lastTotal = 0;\n  this.lastChar = Buffer.allocUnsafe(nb);\n}\n\nStringDecoder.prototype.write = function (buf) {\n  if (buf.length === 0) return '';\n  var r;\n  var i;\n  if (this.lastNeed) {\n    r = this.fillLast(buf);\n    if (r === undefined) return '';\n    i = this.lastNeed;\n    this.lastNeed = 0;\n  } else {\n    i = 0;\n  }\n  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);\n  return r || '';\n};\n\nStringDecoder.prototype.end = utf8End;\n\n// Returns only complete characters in a Buffer\nStringDecoder.prototype.text = utf8Text;\n\n// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer\nStringDecoder.prototype.fillLast = function (buf) {\n  if (this.lastNeed <= buf.length) {\n    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);\n    return this.lastChar.toString(this.encoding, 0, this.lastTotal);\n  }\n  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);\n  this.lastNeed -= buf.length;\n};\n\n// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a\n// continuation byte. If an invalid byte is detected, -2 is returned.\nfunction utf8CheckByte(byte) {\n  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;\n  return byte >> 6 === 0x02 ? -1 : -2;\n}\n\n// Checks at most 3 bytes at the end of a Buffer in order to detect an\n// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)\n// needed to complete the UTF-8 character (if applicable) are returned.\nfunction utf8CheckIncomplete(self, buf, i) {\n  var j = buf.length - 1;\n  if (j < i) return 0;\n  var nb = utf8CheckByte(buf[j]);\n  if (nb >= 0) {\n    if (nb > 0) self.lastNeed = nb - 1;\n    return nb;\n  }\n  if (--j < i || nb === -2) return 0;\n  nb = utf8CheckByte(buf[j]);\n  if (nb >= 0) {\n    if (nb > 0) self.lastNeed = nb - 2;\n    return nb;\n  }\n  if (--j < i || nb === -2) return 0;\n  nb = utf8CheckByte(buf[j]);\n  if (nb >= 0) {\n    if (nb > 0) {\n      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;\n    }\n    return nb;\n  }\n  return 0;\n}\n\n// Validates as many continuation bytes for a multi-byte UTF-8 character as\n// needed or are available. If we see a non-continuation byte where we expect\n// one, we \"replace\" the validated continuation bytes we've seen so far with\n// a single UTF-8 replacement character ('\\ufffd'), to match v8's UTF-8 decoding\n// behavior. The continuation byte check is included three times in the case\n// where all of the continuation bytes for a character exist in the same buffer.\n// It is also done this way as a slight performance increase instead of using a\n// loop.\nfunction utf8CheckExtraBytes(self, buf, p) {\n  if ((buf[0] & 0xC0) !== 0x80) {\n    self.lastNeed = 0;\n    return '\\ufffd';\n  }\n  if (self.lastNeed > 1 && buf.length > 1) {\n    if ((buf[1] & 0xC0) !== 0x80) {\n      self.lastNeed = 1;\n      return '\\ufffd';\n    }\n    if (self.lastNeed > 2 && buf.length > 2) {\n      if ((buf[2] & 0xC0) !== 0x80) {\n        self.lastNeed = 2;\n        return '\\ufffd';\n      }\n    }\n  }\n}\n\n// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.\nfunction utf8FillLast(buf) {\n  var p = this.lastTotal - this.lastNeed;\n  var r = utf8CheckExtraBytes(this, buf, p);\n  if (r !== undefined) return r;\n  if (this.lastNeed <= buf.length) {\n    buf.copy(this.lastChar, p, 0, this.lastNeed);\n    return this.lastChar.toString(this.encoding, 0, this.lastTotal);\n  }\n  buf.copy(this.lastChar, p, 0, buf.length);\n  this.lastNeed -= buf.length;\n}\n\n// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a\n// partial character, the character's bytes are buffered until the required\n// number of bytes are available.\nfunction utf8Text(buf, i) {\n  var total = utf8CheckIncomplete(this, buf, i);\n  if (!this.lastNeed) return buf.toString('utf8', i);\n  this.lastTotal = total;\n  var end = buf.length - (total - this.lastNeed);\n  buf.copy(this.lastChar, 0, end);\n  return buf.toString('utf8', i, end);\n}\n\n// For UTF-8, a replacement character is added when ending on a partial\n// character.\nfunction utf8End(buf) {\n  var r = buf && buf.length ? this.write(buf) : '';\n  if (this.lastNeed) return r + '\\ufffd';\n  return r;\n}\n\n// UTF-16LE typically needs two bytes per character, but even if we have an even\n// number of bytes available, we need to check if we end on a leading/high\n// surrogate. In that case, we need to wait for the next two bytes in order to\n// decode the last character properly.\nfunction utf16Text(buf, i) {\n  if ((buf.length - i) % 2 === 0) {\n    var r = buf.toString('utf16le', i);\n    if (r) {\n      var c = r.charCodeAt(r.length - 1);\n      if (c >= 0xD800 && c <= 0xDBFF) {\n        this.lastNeed = 2;\n        this.lastTotal = 4;\n        this.lastChar[0] = buf[buf.length - 2];\n        this.lastChar[1] = buf[buf.length - 1];\n        return r.slice(0, -1);\n      }\n    }\n    return r;\n  }\n  this.lastNeed = 1;\n  this.lastTotal = 2;\n  this.lastChar[0] = buf[buf.length - 1];\n  return buf.toString('utf16le', i, buf.length - 1);\n}\n\n// For UTF-16LE we do not explicitly append special replacement characters if we\n// end on a partial character, we simply let v8 handle that.\nfunction utf16End(buf) {\n  var r = buf && buf.length ? this.write(buf) : '';\n  if (this.lastNeed) {\n    var end = this.lastTotal - this.lastNeed;\n    return r + this.lastChar.toString('utf16le', 0, end);\n  }\n  return r;\n}\n\nfunction base64Text(buf, i) {\n  var n = (buf.length - i) % 3;\n  if (n === 0) return buf.toString('base64', i);\n  this.lastNeed = 3 - n;\n  this.lastTotal = 3;\n  if (n === 1) {\n    this.lastChar[0] = buf[buf.length - 1];\n  } else {\n    this.lastChar[0] = buf[buf.length - 2];\n    this.lastChar[1] = buf[buf.length - 1];\n  }\n  return buf.toString('base64', i, buf.length - n);\n}\n\nfunction base64End(buf) {\n  var r = buf && buf.length ? this.write(buf) : '';\n  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);\n  return r;\n}\n\n// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)\nfunction simpleWrite(buf) {\n  return buf.toString(this.encoding);\n}\n\nfunction simpleEnd(buf) {\n  return buf && buf.length ? this.write(buf) : '';\n}\n\n//# sourceURL=webpack:///./node_modules/string_decoder/lib/string_decoder.js?");

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n\n\n//# sourceURL=webpack:///(webpack)/buildin/global.js?");

/***/ }),

/***/ "./src/Client.js":
/*!***********************!*\
  !*** ./src/Client.js ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global, process) {!function(t,i){ true?module.exports=i():undefined}(\"undefined\"!=typeof self?self:this,function(){return function(t){function i(e){if(n[e])return n[e].exports;var r=n[e]={i:e,l:!1,exports:{}};return t[e].call(r.exports,r,r.exports,i),r.l=!0,r.exports}var n={};return i.m=t,i.c=n,i.d=function(t,n,e){i.o(t,n)||Object.defineProperty(t,n,{configurable:!1,enumerable:!0,get:e})},i.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(n,\"a\",n),n},i.o=function(t,i){return Object.prototype.hasOwnProperty.call(t,i)},i.p=\"\",i(i.s=0)}([function(t,i){function n(t,i,n){this.low=0|t,this.high=0|i,this.unsigned=!!n}function e(t){return!0===(t&&t.__isLong__)}function r(t,i){var n,e,r;return i?(t>>>=0,(r=0<=t&&t<256)&&(e=l[t])?e:(n=h(t,(0|t)<0?-1:0,!0),r&&(l[t]=n),n)):(t|=0,(r=-128<=t&&t<128)&&(e=f[t])?e:(n=h(t,t<0?-1:0,!1),r&&(f[t]=n),n))}function s(t,i){if(isNaN(t))return i?p:m;if(i){if(t<0)return p;if(t>=c)return q}else{if(t<=-v)return _;if(t+1>=v)return E}return t<0?s(-t,i).neg():h(t%d|0,t/d|0,i)}function h(t,i,e){return new n(t,i,e)}function u(t,i,n){if(0===t.length)throw Error(\"empty string\");if(\"NaN\"===t||\"Infinity\"===t||\"+Infinity\"===t||\"-Infinity\"===t)return m;if(\"number\"==typeof i?(n=i,i=!1):i=!!i,(n=n||10)<2||36<n)throw RangeError(\"radix\");var e;if((e=t.indexOf(\"-\"))>0)throw Error(\"interior hyphen\");if(0===e)return u(t.substring(1),i,n).neg();for(var r=s(a(n,8)),h=m,o=0;o<t.length;o+=8){var g=Math.min(8,t.length-o),f=parseInt(t.substring(o,o+g),n);if(g<8){var l=s(a(n,g));h=h.mul(l).add(s(f))}else h=h.mul(r),h=h.add(s(f))}return h.unsigned=i,h}function o(t,i){return\"number\"==typeof t?s(t,i):\"string\"==typeof t?u(t,i):h(t.low,t.high,\"boolean\"==typeof i?i:t.unsigned)}t.exports=n;var g=null;try{g=new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0,97,115,109,1,0,0,0,1,13,2,96,0,1,127,96,4,127,127,127,127,1,127,3,7,6,0,1,1,1,1,1,6,6,1,127,1,65,0,11,7,50,6,3,109,117,108,0,1,5,100,105,118,95,115,0,2,5,100,105,118,95,117,0,3,5,114,101,109,95,115,0,4,5,114,101,109,95,117,0,5,8,103,101,116,95,104,105,103,104,0,0,10,191,1,6,4,0,35,0,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,126,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,127,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,128,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,129,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,130,34,4,66,32,135,167,36,0,32,4,167,11])),{}).exports}catch(t){}n.prototype.__isLong__,Object.defineProperty(n.prototype,\"__isLong__\",{value:!0}),n.isLong=e;var f={},l={};n.fromInt=r,n.fromNumber=s,n.fromBits=h;var a=Math.pow;n.fromString=u,n.fromValue=o;var d=4294967296,c=d*d,v=c/2,w=r(1<<24),m=r(0);n.ZERO=m;var p=r(0,!0);n.UZERO=p;var y=r(1);n.ONE=y;var b=r(1,!0);n.UONE=b;var N=r(-1);n.NEG_ONE=N;var E=h(-1,2147483647,!1);n.MAX_VALUE=E;var q=h(-1,-1,!0);n.MAX_UNSIGNED_VALUE=q;var _=h(0,-2147483648,!1);n.MIN_VALUE=_;var B=n.prototype;B.toInt=function(){return this.unsigned?this.low>>>0:this.low},B.toNumber=function(){return this.unsigned?(this.high>>>0)*d+(this.low>>>0):this.high*d+(this.low>>>0)},B.toString=function(t){if((t=t||10)<2||36<t)throw RangeError(\"radix\");if(this.isZero())return\"0\";if(this.isNegative()){if(this.eq(_)){var i=s(t),n=this.div(i),e=n.mul(i).sub(this);return n.toString(t)+e.toInt().toString(t)}return\"-\"+this.neg().toString(t)}for(var r=s(a(t,6),this.unsigned),h=this,u=\"\";;){var o=h.div(r),g=h.sub(o.mul(r)).toInt()>>>0,f=g.toString(t);if(h=o,h.isZero())return f+u;for(;f.length<6;)f=\"0\"+f;u=\"\"+f+u}},B.getHighBits=function(){return this.high},B.getHighBitsUnsigned=function(){return this.high>>>0},B.getLowBits=function(){return this.low},B.getLowBitsUnsigned=function(){return this.low>>>0},B.getNumBitsAbs=function(){if(this.isNegative())return this.eq(_)?64:this.neg().getNumBitsAbs();for(var t=0!=this.high?this.high:this.low,i=31;i>0&&0==(t&1<<i);i--);return 0!=this.high?i+33:i+1},B.isZero=function(){return 0===this.high&&0===this.low},B.eqz=B.isZero,B.isNegative=function(){return!this.unsigned&&this.high<0},B.isPositive=function(){return this.unsigned||this.high>=0},B.isOdd=function(){return 1==(1&this.low)},B.isEven=function(){return 0==(1&this.low)},B.equals=function(t){return e(t)||(t=o(t)),(this.unsigned===t.unsigned||this.high>>>31!=1||t.high>>>31!=1)&&(this.high===t.high&&this.low===t.low)},B.eq=B.equals,B.notEquals=function(t){return!this.eq(t)},B.neq=B.notEquals,B.ne=B.notEquals,B.lessThan=function(t){return this.comp(t)<0},B.lt=B.lessThan,B.lessThanOrEqual=function(t){return this.comp(t)<=0},B.lte=B.lessThanOrEqual,B.le=B.lessThanOrEqual,B.greaterThan=function(t){return this.comp(t)>0},B.gt=B.greaterThan,B.greaterThanOrEqual=function(t){return this.comp(t)>=0},B.gte=B.greaterThanOrEqual,B.ge=B.greaterThanOrEqual,B.compare=function(t){if(e(t)||(t=o(t)),this.eq(t))return 0;var i=this.isNegative(),n=t.isNegative();return i&&!n?-1:!i&&n?1:this.unsigned?t.high>>>0>this.high>>>0||t.high===this.high&&t.low>>>0>this.low>>>0?-1:1:this.sub(t).isNegative()?-1:1},B.comp=B.compare,B.negate=function(){return!this.unsigned&&this.eq(_)?_:this.not().add(y)},B.neg=B.negate,B.add=function(t){e(t)||(t=o(t));var i=this.high>>>16,n=65535&this.high,r=this.low>>>16,s=65535&this.low,u=t.high>>>16,g=65535&t.high,f=t.low>>>16,l=65535&t.low,a=0,d=0,c=0,v=0;return v+=s+l,c+=v>>>16,v&=65535,c+=r+f,d+=c>>>16,c&=65535,d+=n+g,a+=d>>>16,d&=65535,a+=i+u,a&=65535,h(c<<16|v,a<<16|d,this.unsigned)},B.subtract=function(t){return e(t)||(t=o(t)),this.add(t.neg())},B.sub=B.subtract,B.multiply=function(t){if(this.isZero())return m;if(e(t)||(t=o(t)),g){return h(g.mul(this.low,this.high,t.low,t.high),g.get_high(),this.unsigned)}if(t.isZero())return m;if(this.eq(_))return t.isOdd()?_:m;if(t.eq(_))return this.isOdd()?_:m;if(this.isNegative())return t.isNegative()?this.neg().mul(t.neg()):this.neg().mul(t).neg();if(t.isNegative())return this.mul(t.neg()).neg();if(this.lt(w)&&t.lt(w))return s(this.toNumber()*t.toNumber(),this.unsigned);var i=this.high>>>16,n=65535&this.high,r=this.low>>>16,u=65535&this.low,f=t.high>>>16,l=65535&t.high,a=t.low>>>16,d=65535&t.low,c=0,v=0,p=0,y=0;return y+=u*d,p+=y>>>16,y&=65535,p+=r*d,v+=p>>>16,p&=65535,p+=u*a,v+=p>>>16,p&=65535,v+=n*d,c+=v>>>16,v&=65535,v+=r*a,c+=v>>>16,v&=65535,v+=u*l,c+=v>>>16,v&=65535,c+=i*d+n*a+r*l+u*f,c&=65535,h(p<<16|y,c<<16|v,this.unsigned)},B.mul=B.multiply,B.divide=function(t){if(e(t)||(t=o(t)),t.isZero())throw Error(\"division by zero\");if(g){if(!this.unsigned&&-2147483648===this.high&&-1===t.low&&-1===t.high)return this;return h((this.unsigned?g.div_u:g.div_s)(this.low,this.high,t.low,t.high),g.get_high(),this.unsigned)}if(this.isZero())return this.unsigned?p:m;var i,n,r;if(this.unsigned){if(t.unsigned||(t=t.toUnsigned()),t.gt(this))return p;if(t.gt(this.shru(1)))return b;r=p}else{if(this.eq(_)){if(t.eq(y)||t.eq(N))return _;if(t.eq(_))return y;return i=this.shr(1).div(t).shl(1),i.eq(m)?t.isNegative()?y:N:(n=this.sub(t.mul(i)),r=i.add(n.div(t)))}if(t.eq(_))return this.unsigned?p:m;if(this.isNegative())return t.isNegative()?this.neg().div(t.neg()):this.neg().div(t).neg();if(t.isNegative())return this.div(t.neg()).neg();r=m}for(n=this;n.gte(t);){i=Math.max(1,Math.floor(n.toNumber()/t.toNumber()));for(var u=Math.ceil(Math.log(i)/Math.LN2),f=u<=48?1:a(2,u-48),l=s(i),d=l.mul(t);d.isNegative()||d.gt(n);)i-=f,l=s(i,this.unsigned),d=l.mul(t);l.isZero()&&(l=y),r=r.add(l),n=n.sub(d)}return r},B.div=B.divide,B.modulo=function(t){if(e(t)||(t=o(t)),g){return h((this.unsigned?g.rem_u:g.rem_s)(this.low,this.high,t.low,t.high),g.get_high(),this.unsigned)}return this.sub(this.div(t).mul(t))},B.mod=B.modulo,B.rem=B.modulo,B.not=function(){return h(~this.low,~this.high,this.unsigned)},B.and=function(t){return e(t)||(t=o(t)),h(this.low&t.low,this.high&t.high,this.unsigned)},B.or=function(t){return e(t)||(t=o(t)),h(this.low|t.low,this.high|t.high,this.unsigned)},B.xor=function(t){return e(t)||(t=o(t)),h(this.low^t.low,this.high^t.high,this.unsigned)},B.shiftLeft=function(t){return e(t)&&(t=t.toInt()),0==(t&=63)?this:t<32?h(this.low<<t,this.high<<t|this.low>>>32-t,this.unsigned):h(0,this.low<<t-32,this.unsigned)},B.shl=B.shiftLeft,B.shiftRight=function(t){return e(t)&&(t=t.toInt()),0==(t&=63)?this:t<32?h(this.low>>>t|this.high<<32-t,this.high>>t,this.unsigned):h(this.high>>t-32,this.high>=0?0:-1,this.unsigned)},B.shr=B.shiftRight,B.shiftRightUnsigned=function(t){if(e(t)&&(t=t.toInt()),0===(t&=63))return this;var i=this.high;if(t<32){return h(this.low>>>t|i<<32-t,i>>>t,this.unsigned)}return 32===t?h(i,0,this.unsigned):h(i>>>t-32,0,this.unsigned)},B.shru=B.shiftRightUnsigned,B.shr_u=B.shiftRightUnsigned,B.toSigned=function(){return this.unsigned?h(this.low,this.high,!1):this},B.toUnsigned=function(){return this.unsigned?this:h(this.low,this.high,!0)},B.toBytes=function(t){return t?this.toBytesLE():this.toBytesBE()},B.toBytesLE=function(){var t=this.high,i=this.low;return[255&i,i>>>8&255,i>>>16&255,i>>>24,255&t,t>>>8&255,t>>>16&255,t>>>24]},B.toBytesBE=function(){var t=this.high,i=this.low;return[t>>>24,t>>>16&255,t>>>8&255,255&t,i>>>24,i>>>16&255,i>>>8&255,255&i]},n.fromBytes=function(t,i,e){return e?n.fromBytesLE(t,i):n.fromBytesBE(t,i)},n.fromBytesLE=function(t,i){return new n(t[0]|t[1]<<8|t[2]<<16|t[3]<<24,t[4]|t[5]<<8|t[6]<<16|t[7]<<24,i)},n.fromBytesBE=function(t,i){return new n(t[4]<<24|t[5]<<16|t[6]<<8|t[7],t[0]<<24|t[1]<<16|t[2]<<8|t[3],i)}}])});\n\nglobal.Long = module.exports;\n/* eslint-disable */ (() => {\n//+ Jonas Raoni Soares Silva\n//@ http://jsfromhell.com/classes/binary-parser [rev. #1]\n\nif (typeof Long === 'undefined') {\n\tglobal.Long = __webpack_require__(/*! long */ \"./node_modules/long/src/long.js\");\n}\n\nclass BinaryParser {\n  constructor(bigEndian, allowExceptions) {\n    this.bigEndian = bigEndian;\n    this.allowExceptions = allowExceptions;\n  }\n\n  encodeFloat(number, precisionBits, exponentBits) {\n\t\tvar bias = Math.pow(2, exponentBits - 1) - 1, minExp = -bias + 1, maxExp = bias, minUnnormExp = minExp - precisionBits,\n\t\tstatus = isNaN(n = parseFloat(number)) || n == -Infinity || n == +Infinity ? n : 0,\n\t\texp = 0, len = 2 * bias + 1 + precisionBits + 3, bin = new Array(len),\n\t\tsignal = (n = status !== 0 ? 0 : n) < 0, n = Math.abs(n), intPart = Math.floor(n), floatPart = n - intPart,\n\t\ti, lastBit, rounded, j, result;\n\t\tfor(i = len; i; bin[--i] = 0);\n\t\tfor(i = bias + 2; intPart && i; bin[--i] = intPart % 2, intPart = Math.floor(intPart / 2));\n\t\tfor(i = bias + 1; floatPart > 0 && i; (bin[++i] = ((floatPart *= 2) >= 1) - 0) && --floatPart);\n\t\tfor(i = -1; ++i < len && !bin[i];);\n\t\tif(bin[(lastBit = precisionBits - 1 + (i = (exp = bias + 1 - i) >= minExp && exp <= maxExp ? i + 1 : bias + 1 - (exp = minExp - 1))) + 1]){\n\t\t\tif(!(rounded = bin[lastBit]))\n\t\t\t\tfor(j = lastBit + 2; !rounded && j < len; rounded = bin[j++]);\n\t\t\tfor(j = lastBit + 1; rounded && --j >= 0; (bin[j] = !bin[j] - 0) && (rounded = 0));\n\t\t}\n\t\tfor(i = i - 2 < 0 ? -1 : i - 3; ++i < len && !bin[i];);\n\n\t\tif ((exp = bias + 1 - i) >= minExp && exp <= maxExp ? ++i : exp < minExp &&\n\t\t\t(exp != bias + 1 - len && exp < minUnnormExp && this.warn(\"encodeFloat::float underflow\"), i = bias + 1 - (exp = minExp - 1)));\n\t\tif ((intPart || status !== 0) && (this.warn(intPart ? \"encodeFloat::float overflow\" : \"encodeFloat::\" + status),\n\t\t\texp = maxExp + 1, i = bias + 2, status == -Infinity ? signal = 1 : isNaN(status) && (bin[i] = 1)));\n    for(n = Math.abs(exp + bias), j = exponentBits + 1, result = \"\"; --j; result = (n % 2) + result, n = n >>= 1);\n    let r;\n\t\tfor(n = 0, j = 0, i = (result = (signal ? \"1\" : \"0\") + result + bin.slice(i, i + precisionBits).join(\"\")).length, r = [];\n\t\t\ti; n += (1 << j) * result.charAt(--i), j == 7 && (r[r.length] = String.fromCharCode(n), n = 0), j = (j + 1) % 8);\n\t\tr[r.length] = n ? String.fromCharCode(n) : \"\";\n\t\treturn (this.bigEndian ? r.reverse() : r).join(\"\");\n\t}\n\n  encodeInt(number, bits, signed){\n\t\tvar max = Math.pow(2, bits), r = [];\n\t\t(number >= max || number < -(max >> 1)) && this.warn(\"encodeInt::overflow\") && (number = 0);\n\t\tnumber < 0 && (number += max);\n\t\tfor(; number; r[r.length] = String.fromCharCode(number % 256), number = Math.floor(number / 256));\n\t\tfor(bits = -(-bits >> 3) - r.length; bits--; r[r.length] = \"\\0\");\n\t\treturn (this.bigEndian ? r.reverse() : r).join(\"\");\n\t}\n\tdecodeFloat(data, precisionBits, exponentBits){\n\t\tvar b = ((b = new Buffer(this.bigEndian, data)).checkBuffer(precisionBits + exponentBits + 1), b),\n\t\t\tbias = Math.pow(2, exponentBits - 1) - 1, signal = b.readBits(precisionBits + exponentBits, 1),\n\t\t\texponent = b.readBits(precisionBits, exponentBits), significand = 0,\n\t\t\tdivisor = 2, curByte = b.buffer.length + (-precisionBits >> 3) - 1,\n\t\t\tbyteValue, startBit, mask;\n\t\tdo\n\t\t\tfor(byteValue = b.buffer[ ++curByte ], startBit = precisionBits % 8 || 8, mask = 1 << startBit;\n\t\t\t\tmask >>= 1; (byteValue & mask) && (significand += 1 / divisor), divisor *= 2);\n\t\twhile(precisionBits -= startBit);\n\t\treturn exponent == (bias << 1) + 1 ? significand ? NaN : signal ? -Infinity : +Infinity\n\t\t\t: (1 + signal * -2) * (exponent || significand ? !exponent ? Math.pow(2, -bias + 1) * significand\n\t\t\t: Math.pow(2, exponent - bias) * (1 + significand) : 0);\n\t}\n\tdecodeInt(data, bits, signed){\n\t\tvar b = new Buffer(this.bigEndian, data), x = b.readBits(0, bits), max = Math.pow(2, bits);\n\t\treturn signed && x >= max / 2 ? x - max : x;\n  }\n  warn(msg){\n\t\tif(this.allowExceptions)\n\t\t\tthrow new Error(msg);\n\t\treturn 1;\n\t}\n\ttoSmall(data){return this.decodeInt(data, 8, true);}\n\tfromSmall(number){return this.encodeInt(number, 8, true);}\n\ttoByte(data){return this.decodeInt(data, 8, false);}\n\tfromByte(number){return this.encodeInt(number, 8, false);}\n\ttoShort(data){return this.decodeInt(data, 16, true);}\n\tfromShort(number){return this.encodeInt(number, 16, true);}\n\ttoWord(data){return this.decodeInt(data, 16, false);}\n\tfromWord(number){return this.encodeInt(number, 16, false);}\n\ttoInt(data){return this.decodeInt(data, 32, true);}\n\tfromInt(number){return this.encodeInt(number, 32, true);}\n\ttoDWord(data){return this.decodeInt(data, 32, false);}\n\tfromDWord(number){return this.encodeInt(number, 32, false);}\n\ttoFloat(data){return this.decodeFloat(data, 23, 8);}\n\tfromFloat(number){return this.encodeFloat(number, 23, 8);}\n\ttoDouble(data){return this.decodeFloat(data, 52, 11);}\n\tfromDouble(number){return this.encodeFloat(number, 52, 11);}\n};\n\tclass Buffer {\n  constructor(bigEndian, buffer) {\n    this.bigEndian = bigEndian || 0;\n    this.buffer = [];\n    this.setBuffer(buffer);\n  }\n  readBits(start, length){\n    //shl fix: Henri Torgemane ~1996 (compressed by Jonas Raoni)\n    function shl(a, b){\n      for(++b; --b; a = ((a %= 0x7fffffff + 1) & 0x40000000) == 0x40000000 ? a * 2 : (a - 0x40000000) * 2 + 0x7fffffff + 1);\n      return a;\n    }\n    if(start < 0 || length <= 0)\n      return 0;\n    this.checkBuffer(start + length);\n    for(var offsetLeft, offsetRight = start % 8, curByte = this.buffer.length - (start >> 3) - 1,\n      lastByte = this.buffer.length + (-(start + length) >> 3), diff = curByte - lastByte,\n      sum = ((this.buffer[ curByte ] >> offsetRight) & ((1 << (diff ? 8 - offsetRight : length)) - 1))\n      + (diff && (offsetLeft = (start + length) % 8) ? (this.buffer[ lastByte++ ] & ((1 << offsetLeft) - 1))\n      << (diff-- << 3) - offsetRight : 0); diff; sum += shl(this.buffer[ lastByte++ ], (diff-- << 3) - offsetRight)\n    );\n    return sum;\n  };\n  setBuffer(data){\n    if(data){\n      for(var l, i = l = data.length, b = this.buffer = new Array(l); i; b[l - i] = data.charCodeAt(--i));\n      this.bigEndian && b.reverse();\n    }\n  };\n  hasNeededBits(neededBits){\n    return this.buffer.length >= -(-neededBits >> 3);\n  };\n  checkBuffer(neededBits){\n    if(!this.hasNeededBits(neededBits))\n      throw new Error(\"checkBuffer::missing bytes\");\n  };\n}\nconst binaryParser = new BinaryParser(true, false);\n\nconst i16Arr = new Int16Array(1);\nconst i32Arr = new Int32Array(1);\nclass StreamDecoder {\n  constructor(buffer) {\n    this.buffer = buffer;\n    this.pos = 0;\n  }\n\n\treset() {\n\t\tthis.pos = 0;\n\t}\n\n  getIB() {\n    return this.buffer[this.pos++] === 1;\n\t}\n\n  getI8() {\n\t\tconst r = this.buffer[this.pos++];\n    if (r > 127) {\n      return r - 256;\n    }\n    return r;\n\t}\n\n\tgetI16() {\n\t\ti16Arr[0] = (this.buffer[this.pos++] << 8) + (this.buffer[this.pos++]);\n    return i16Arr[0];\n\t}\n\n  getI32() {\n    i32Arr[0] = (this.buffer[this.pos++] << 24) + (this.buffer[this.pos++] << 16) + (this.buffer[this.pos++] << 8) + (this.buffer[this.pos++]);\n    return i32Arr[0];\n\t}\n\n  getI64() {\n    const high = this.getI32();\n    const low = this.getI32();\n    return new Long(low, high);\n  }\n\n\tgetF32() {\n    const str = `${String.fromCharCode(this.buffer[this.pos++])}${String.fromCharCode(this.buffer[this.pos++])}${String.fromCharCode(this.buffer[this.pos++])}${String.fromCharCode(this.buffer[this.pos++])}`;\n\t\treturn binaryParser.toFloat(str);\n\t}\n\n  getF64() {\n\t\tconst b = this.buffer;\n\t\tconst p = this.pos;\n    const str = `${\n\t\t\tString.fromCharCode(b[p])\n\t\t}${String.fromCharCode(b[p + 1])\n\t\t}${String.fromCharCode(b[p + 2])\n\t\t}${String.fromCharCode(b[p + 3])\n\t\t}${String.fromCharCode(b[p + 4])\n\t\t}${String.fromCharCode(b[p + 5])\n\t\t}${String.fromCharCode(b[p + 6])\n\t\t}${String.fromCharCode(b[p + 7])}`;\n\t\tthis.pos = p + 8;\n\t\treturn binaryParser.toDouble(str);\n  }\n\n  skip(numBits) {\n    this.pos += numBits;\n  }\n\n  getString() {\n      const codePoints = [];\n      const len = this.getI32();\n      for (let i = 0; i < len; i += 1) {\n         // const exists = this.getI8();\n         // if (exists === 1) {\n          codePoints.push(this.getI32());\n         // }\n      }\n      return String.fromCodePoint(...codePoints);\n  }\n\n  getBufferShort() {\n    const ret = [];\n    const len = this.getI32();\n    for (let i = 0; i < len; i += 1) {\n      ret.push(this.getI16());\n    }\n    return ret;\n  }\n\n  getBufferInt() {\n    const ret = [];\n    const len = this.getI32();\n    for (let i = 0; i < len; i += 1) {\n      ret.push(this.getI32());\n    }\n    return ret;\n  }\n\n  getBufferFloat() {\n    const ret = [];\n    const len = this.getI32();\n    for (let i = 0; i < len; i += 1) {\n      ret.push(this.getF32());\n    }\n    return ret;\n  }\n\n  getArray(entryReader) {\n    const ret = [];\n    const len = this.getI32();\n    console.log('getArr, len:', len);\n    for (let i = 0; i < len; i += 1) {\n      if (this.getIB()) {\n        ret.push(entryReader());\n      } else {\n        ret.push(null);\n      }\n    }\n    return ret;\n  }\n\n  getList(entryReader) {\n    const ret = this.getArray(entryReader);\n    const pos = this.getI32();\n    return ret.slice(0, pos);\n  }\n}\n\nclass StreamEncoder {\n  constructor(buffer) {\n    this.buffer = buffer;\n    this.pos = 0;\n\t}\n\n\treset() {\n\t\tthis.pos = 0;\n\t}\n\n  addIB(val) {\n    this.buffer[this.pos++] = val ? 1 : 0;\n  }\n\n  addI8(val) {\n    this.buffer[this.pos++] = val & 0xff;\n  }\n\n  addI16(val) {\n    const b = this.buffer;\n    const p = this.pos;\n    b[p] = (val >> 8) & 0xff;\n    b[p + 1] = val & 0xff;\n    this.pos = p + 2;\n  }\n\n  addI32(val) {\n    const b = this.buffer;\n    const p = this.pos;\n    b[p] = (val >> 24) & 0xff;\n    b[p + 1] = (val >> 16) & 0xff;\n    b[p + 2] = (val >> 8) & 0xff;\n    b[p + 3] = val & 0xff;\n    this.pos = p + 4;\n  }\n\n  addI64(val) {\n\t\tval = _capl(val);\n    this.addI32(val.high);\n    this.addI32(val.low);\n  }\n\n  addF32(val) {\n    const bytes = binaryParser.fromFloat(val);\n\n    const b = this.buffer;\n    const p = this.pos;\n    b[p] = bytes.codePointAt(0);\n    b[p + 1] = bytes.codePointAt(1);\n    b[p + 2] = bytes.codePointAt(2);\n    b[p + 3] = bytes.codePointAt(3);\n    this.pos = p + 4;\n  }\n\n  addF64(val) {\n    const bytes = binaryParser.fromDouble(val);\n\n\t\tconst b = this.buffer;\n\t\tconst p = this.pos;\n    b[p] = bytes.codePointAt(0);\n    b[p + 1] = bytes.codePointAt(1);\n    b[p + 2] = bytes.codePointAt(2);\n\t\tb[p + 3] = bytes.codePointAt(3);\n\n    b[p + 4] = bytes.codePointAt(4);\n    b[p + 5] = bytes.codePointAt(5);\n    b[p + 6] = bytes.codePointAt(6);\n\t\tb[p + 7] = bytes.codePointAt(7);\n\n\t\tthis.pos = p + 8;\n\t}\n\n\taddString(str) {\n\t\tconst len = str.length;\n\t\tthis.addI32(len);\n\t\tfor (let i = 0; i < len; i += 1) {\n\t\t\tthis.addI32(str.codePointAt(i));\n\t\t}\n\t}\n\n  addBufferByte(buf) {\n    const len = buf.length;\n    this.addI32(len);\n\t\tfor (let i = 0; i < len; i += 1) {\n\t\t\tthis.addI8(buf[i]);\n\t\t}\n  }\n  addBufferShort(buf) {\n    const len = buf.length;\n    this.addI32(len);\n\t\tfor (let i = 0; i < len; i += 1) {\n\t\t\tthis.addI16(buf[i]);\n\t\t}\n  }\n  addBufferFloat(buf) {\n    const len = buf.length;\n    this.addI32(len);\n\t\tfor (let i = 0; i < len; i += 1) {\n\t\t\tthis.addF32(buf[i]);\n\t\t}\n  }\n}\n\n// [ [ 5, 72, 101, 108, 108, 111 ] ]\n//    len\t H   e    l     l   o\nfunction _strToKl(strVal) {\n\tconst len = strVal.length;\n\tconst arr = Array(1 + len);\n\tarr[0] = len;\n\tfor (let i = 0; i < len; ++i) {\n\t\tarr[i + 1] = strVal.codePointAt(i);\n\t}\n\treturn [arr];\n}\n\nfunction _bufferEqual(a, b) {\n  if (a.length !== b.length) {\n    return false;\n  }\n  for (let i = 1; i < a.length; ++i) {\n    if (a[i] !== b[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n\nfunction _doLog(...msg) {\n\tif (msg.length > 0 && typeof PRETTY === 'boolean' && PRETTY) {\n\t\tconsole.log('\\x1b[2m%s\\x1b[0m', ...msg);\n\t} else {\n\t\tconsole.log(...msg);\n\t}\n}\n\nconst FlushType = {\n  RAW: -9, STRING: -8, DOUBLE: -7, FLOAT: -6,\n  LONG: -5, INT: -4, SHORT: -3, BYTE: -2, BOOL: -1\n}\n\nclass I$O {\n\tconstructor(binding) {\n\t\tthis.binding = binding;\n\n\t\t// Output writer & reader\n\t\tthis.ow = new StreamEncoder(new Uint8Array(32 * 1024 * 1024));\n\t\tthis.or = new StreamDecoder(this.ow.buffer);\n\t\t// Input writer & reader\n\t\tthis.iw = new StreamEncoder(new Uint8Array(32 * 1024 * 1024));\n\t\tthis.ir = new StreamDecoder(this.iw.buffer);\n\t}\n\n\tflushPrimitive(mthId, srcLen) {\n\t\tconst src = this.or;\n\t\tswitch (mthId) {\n\t\t\tcase FlushType.RAW: { _doLog(`--> [x${srcLen - 4}]`, src.buffer.slice(4, srcLen).toString()); break; }\n\t\t\tcase FlushType.STRING: {\n\t\t\t\tlet str;\n\t\t\t\tif (typeof window === 'undefined') {\n\t\t\t\t\t\tconst { StringDecoder } = __webpack_require__(/*! string_decoder */ \"./node_modules/string_decoder/lib/string_decoder.js\");\n\t\t\t\t\t\tconst dec = new StringDecoder('utf-8');\n\t\t\t\t\t\tstr = dec.write(src.buffer.slice(0, srcLen));\n\t\t\t\t} else {\n\t\t\t\t\t\tstr = new TextDecoder(\"utf-8\").decode(src.buffer.slice(0, srcLen)).replace('\\n', '\\n          ');\n\t\t\t\t}\n\t\t\t\t_doLog(`--> [s${srcLen < 10 ? '  ' : (srcLen < 100 ? ' ' : '')}${srcLen}]`, str);\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tcase FlushType.LONG: {\n\t\t\t\tconst val = src.getI64();\n\t\t\t\t_doLog('--> [ L]', val.toString());\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase FlushType.INT: {\n\t\t\t\tconst val = src.getI32();\n\t\t\t\t_doLog('--> [ i]', val);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase FlushType.BYTE: {\n\t\t\t\tconst val = src.getI8();\n\t\t\t\t_doLog('--> [ b]', val);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase FlushType.FLOAT: {\n\t\t\t\tconst val = src.getF32();\n\t\t\t\t_doLog('--> [ f]', val);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase FlushType.SHORT: {\n\t\t\t\tconst val = src.getI16();\n\t\t\t\t_doLog('--> [ s]', val);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase FlushType.BOOL: {\n\t\t\t\tconst val = src.getI8();\n\t\t\t\t_doLog('--> [ o]', val === 1 ? true : false);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase FlushType.DOUBLE: {\n\t\t\t\tconst val = src.getF64();\n\t\t\t\t_doLog('--> [ d]', val);\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tdefault: {\n\t\t\t\tconsole.error('TODO output type', mthId);\n\t\t\t\tprocess.exit(3);\n\t\t\t}\n\t\t}\n\t\tsrc.reset();\n\t}\n\n\tasync flush(mthId) {\n\t\tconst srcLen = this.ow.pos;\n\n\t\tthis.ow.reset();\n\t\tconst src = this.or;\n\t\tsrc.reset();\n\t\tif (mthId < 0) {\n\t\t\tthis.flushPrimitive(mthId, srcLen);\n\t\t\treturn;\n\t\t}\n\n\t\tconst dst = this.iw;\n\t\tdst.reset();\n\t\tawait this.binding(mthId, src, dst, srcLen);\n\t\tthis.ir.reset();\n\t}\n\n\tflushDirect(mthId) {\n\t\tconst srcLen = this.ow.pos;\n\n\t\tthis.ow.reset();\n\t\tconst src = this.or;\n\t\tsrc.reset();\n\t\tif (mthId < 0) {\n\t\t\tthis.flushPrimitive(mthId, srcLen);\n\t\t\treturn;\n\t\t}\n\n\t\tconst dst = this.iw;\n\t\tdst.reset();\n\t\tthis.binding(mthId, src, dst, srcLen);\n\t\tthis.ir.reset();\n\t}\n}\n\nfunction gub(arr, pos) {\n  const b = arr[pos];\n  return b < 0 ? (b + 256) : b;\n}\n\nfunction snb(arr, pos, val) {\n\tarr[pos] = val;\n}\nfunction gnb(arr, pos) {\n\treturn arr[pos];\n}\n\nfunction gnf(arr, pos) {\n  const str = `${String.fromCharCode(arr[pos])}${String.fromCharCode(arr[pos + 1])}${String.fromCharCode(arr[pos + 2])}${String.fromCharCode(arr[pos + 3])}`;\n  return binaryParser.toFloat(str);\n}\n\nfunction snf(arr, pos, val) {\n  const bytes = binaryParser.fromFloat(val);\n\n  arr[pos + 0] = bytes.codePointAt(0);\n  arr[pos + 1] = bytes.codePointAt(1);\n  arr[pos + 2] = bytes.codePointAt(2);\n\tarr[pos + 3] = bytes.codePointAt(3);\n}\n\nfunction gni(arr, pos) {\n  return (gub(arr, pos) << 24) | (gub(arr, pos + 1) << 16) | (gub(arr, pos + 2) << 8) | gub(arr, pos + 3);\n}\n\nfunction gns(arr, pos) {\n  return (gub(arr, pos) << 8) | gub(arr, pos + 1);\n}\n\nfunction sns(arr, pos, val) {\n  arr[pos] = (val >> 8) & 0xFF;\n  arr[pos + 1] = val & 0xFF;\n}\n\nconst _clamperF64 = new Float64Array(2);\nfunction _capd(val) {\n\t_clamperF64[0] = val;\n\treturn _clamperF64[0];\n}\n\nconst _intBitsI = new Int32Array(2);\nfunction _bitsint(val) {\n\t_intBitsI[0] = val;\n\treturn new Float32Array(_intBitsI.buffer)[0];\n}\n\nconst _intBitsF = new Float32Array(2);\nfunction _bitsFtoI(val) {\n\t_intBitsF[0] = val;\n\treturn new Int32Array(_intBitsF.buffer)[0];\n}\n\nconst _longBitsD = new Float64Array(2);\nfunction _bitsDtoL(val) {\n\t_longBitsD[0] = val;\n\tconst buf = new Int32Array(_longBitsD.buffer);\n\treturn new Long(buf[0], buf[1]);\n}\n\nconst _doubleBitsI = new Int32Array(2);\nfunction _bitsdouble(val) {\n\tconst capped = _capl(val);\n\t_doubleBitsI[0] = capped.low;\n\t_doubleBitsI[1] = capped.high;\n\treturn new Float64Array(_doubleBitsI.buffer)[0];\n}\n\nconst _clamperI32 = new Int32Array(2);\nfunction _capi(val) {\n\t_clamperI32[0] = val;\n\treturn _clamperI32[0];\n}\nfunction _capl(val) {\n\tif (typeof val === 'number') {\n\t\t\treturn Long.fromNumber(val);\n\t}\nreturn val;\n}\nfunction _capo(val) {\n\treturn !!val;\n}\nconst _clamperI8 = new Int8Array(2);\nfunction _capb(val) {\n\t_clamperI8[0] = val;\n\treturn _clamperI8[0];\n}\n\nconst _clamperI16 = new Int16Array(2);\nfunction _caps(val) {\n\t_clamperI16[0] = val;\n\treturn _clamperI16[0];\n}\n\nconst _clamperF32 = new Float32Array(2);\nfunction _capf(val) {\n\t_clamperF32[0] = val;\n\treturn _clamperF32[0];\n}\n\nlet identityHashIdGenerator = 0;\nfunction _identityHash(obj) {\n  if (Array.isArray(obj)) {\n    if (!obj[-1]) {\n      obj[-1] = identityHashIdGenerator++;\n    }\n    return obj[-1];\n  }\n  return _capi(+obj);\n}\n\nfunction sni(arr, pos, val) {\n  arr[pos] = (val >> 24) & 0xFF;\n  arr[pos + 1] = (val >> 16) & 0xFF;\n  arr[pos + 2] = (val >> 8) & 0xFF;\n  arr[pos + 3] = val & 0xFF;\n}\n\nfunction gnl(arr, pos, readFirst) {\n  let high;\n  if (readFirst) {\n    high = gni(arr, pos);\n  } else {\n    high = (gub(arr, pos + 1) << 16) | (gub(pos + 2) << 8) | gub(arr, pos + 3);\n  }\n  const low = gni(arr, pos + 4);\n\n  return new Long(low, high);\n}\n\nfunction snl(arr, pos, val, head) {\n  sni(arr, pos, val.high);\n  if (head) {\n    arr[pos] = head;\n  }\n  sni(arr, pos + 4, val.low);\n}\n\nfunction performJsEscape(src) {\n\treturn src.replace(/\\\\/g, \"\\\\\\\\\").replace(/\\n/g, \"\\\\n\").replace(/\\\"/g, \"\\\\\\\"\");\n}\n\n\n\n // === BOILERPLATE END\n\n  function m1(_a0) {// mmothello.Client~.NewManual)\n   let _2 = m4() /* mmothello.Board.NewManual */;\n   let _1 = [_a0, _2];\n   return _1;\n  }\n  function m4() {// mmothello.Board.NewManual)\n   let _3 = _capi((16)*(16));\n   let _4 = m6(_3) /* Buffer<byte>~.NewManual */;\n   let _0 = [_4];\n   return _0;\n  }\n  function m6(_a0) {// Buffer<byte>~.NewManual)\n   let _1 = [_a0, ...Array(_a0).fill(0)];\n   return _1;\n  }\n  function m9() {// StringBuilder~.NewManual)\n   let _1 = m24() /* List<String>~.NewManual */;\n   let _0 = [_1];\n   return _0;\n  }\n  function m10(_i, _a0) {// StringBuilder~.add~)\n   let _3 = _a0;\n   m25(_i[0],_3) /* List<String>~.add~ */;\n   return undefined;\n  }\n  function m11(_i) {// mmothello.Client.Click.getX)\n   return _i[0];\n  }\n  function m12(_a0) {// int.Stringify)\n   let _3 = (_a0===(0));\n   if (_3) {\n    let _2 = [[1,48]];\n    return _2;\n   }\n   let _4 = m26() /* List<int>~.NewManual */;\n   let _5 = (_a0<(0));\n   if (_5) {\n    _a0 = _capi((0)-_a0);\n   }\n   let _10 = (_a0<(0));\n   if (_10) {\n    let _9 = [[11,45,50,49,52,55,52,56,51,54,52,56]];\n    return _9;\n   }\n   let _12 = (_a0>(0));\n   while (_12) {\n    let _16 = _capi(_a0%(10));\n    let _14 = _capi(_16+(48));\n    let _18 = _14;\n    m27(_4,_18) /* List<int>~.add~ */;\n    _a0 = _capi(_a0/(10));\n    let _20 = (_a0>(0));\n    _12 = _20;\n   }\n   if (_5) {\n    m27(_4,(45)) /* List<int>~.add~ */;\n   }\n   m28(_4,) /* List<int>~.reverse~ */;\n   let _22 = m30(_4) /* SerializationBuilder.makeBetterCopy */;\n   let _23 = m29(_22) /* List.toString */;\n   return _23;\n  }\n  function m13(_i) {// mmothello.Client.Click.getY)\n   return _i[1];\n  }\n  function m14(_i) {// StringBuilder~.getResult)\n   let _5 = [(500), _i];\n   let _2 = m31(_i[0],(0), _5) /* List<String>~.fold */;\n   let _7 = _2;\n   let _6 = m34(_7) /* String~.NewManual */;\n   let _8 = m35((0)) /* int~.NewManual */;\n   let _11 = [(500), _i, _8, _6];\n   m36(_i[0],_11) /* List<String>~.forEach */;\n   let _12 = m39(_6) /* SerializationBuilder.makeBetterCopy */;\n   return _12;\n  }\n  function m17(_a0) {// mmothello.ClientToServer.newOnClick)\n   let _2 = _a0;\n   let _3 = m44((0), _2) /* mmothello.ClientToServer.NewManual */;\n   return _3;\n  }\n  function m18(_a0, _a1) {// mmothello.ClientToServer.OnClick.NewManual)\n   let _2 = [_a0, _a1];\n   return _2;\n  }\n  function m20(_i) {// mmothello.ServerToClient.getRefreshBoard)\n   let _4 = (_i[0]===(0));\n   if (_4) {\n    return _i[1];\n   }\n   let _5 = null;\n   return _5;\n  }\n  function m21(_i, _a0, _a1) {// mmothello.Board.get)\n   let _5 = _capi(_a1*(16));\n   let _6 = _capi(_a0+_5);\n   let _7 = m46(_i[0],_6) /* Buffer<byte>~.get */;\n   return _7;\n  }\n  function m24() {// List<String>~.NewManual)\n   let _2 = m47((5)) /* array<String>~.NewManual */;\n   let _0 = [_2, (0)];\n   return _0;\n  }\n  function m25(_i, _a0) {// List<String>~.add~)\n   let _4 = m48(_i[0],) /* array<String>~.getLength */;\n   let _11 = (_i[1]===_4);\n   if (_11) {\n    let _6 = m48(_i[0],) /* array<String>~.getLength */;\n    let _8 = _capi(_6*(2));\n    let _5 = m47(_8) /* array<String>~.NewManual */;\n    let _10 = [(500), _i, _5];\n    m49(_i[0],_10) /* array<String>~.forEachi */;\n    _i[0] = _5;\n   }\n   let _12 = _i[1];\n   let _13 = _a0;\n   m52(_i[0],_12, _13) /* array<String>~.set~ */;\n   _i[1] = _capi(_i[1]+(1));\n  }\n  function m26() {// List<int>~.NewManual)\n   let _2 = m53((5)) /* array<int>~.NewManual */;\n   let _0 = [_2, (0)];\n   return _0;\n  }\n  function m27(_i, _a0) {// List<int>~.add~)\n   let _4 = m54(_i[0],) /* array<int>~.getLength */;\n   let _11 = (_i[1]===_4);\n   if (_11) {\n    let _6 = m54(_i[0],) /* array<int>~.getLength */;\n    let _8 = _capi(_6*(2));\n    let _5 = m53(_8) /* array<int>~.NewManual */;\n    let _10 = [(500), _i, _5];\n    m55(_i[0],_10) /* array<int>~.forEachi */;\n    _i[0] = _5;\n   }\n   let _12 = _i[1];\n   let _13 = _a0;\n   m58(_i[0],_12, _13) /* array<int>~.set~ */;\n   _i[1] = _capi(_i[1]+(1));\n  }\n  function m28(_i) {// List<int>~.reverse~)\n   let _3 = _capi(_i[1]/(2));\n   let _5 = 0;\n   let _6 = (_5<_3);\n   while (_6) {\n    let _7 = _5;\n    let _9 = _capi(_i[1]-(1));\n    let _10 = _capi(_9-_5);\n    m59(_i[0],_7, _10) /* array<int>~.swap~ */;\n    _5 = _capi(_5+(1));\n    let _12 = (_5<_3);\n    _6 = _12;\n   }\n  }\n  function m29(_a0) {// List.toString)\n   let _1 = m60(_a0,) /* List<int>.getSize */;\n   let _3 = _1;\n   let _2 = m34(_3) /* String~.NewManual */;\n   let _4 = 0;\n   let _5 = (_4<_1);\n   while (_5) {\n    let _6 = _4;\n    let _7 = _4;\n    let _8 = m62(_a0,_7) /* List<int>.get */;\n    let _10 = _8 === null;\n    let _9;\n    if (_10) {\n     _9 = 0;\n    }\n    else {\n     _9 = _8;\n    }\n    let _11 = _9;\n    m61(_2,_6, _11) /* String~.setChar~ */;\n    _4 = _capi(_4+(1));\n    let _13 = (_4<_1);\n    _5 = _13;\n   }\n   let _14 = m39(_2) /* SerializationBuilder.makeBetterCopy */;\n   return _14;\n  }\n  function m30(_a0) {// SerializationBuilder.makeBetterCopy)\n   let _1 = m63() /* Map<any, any>~.NewManual */;\n   let _2 = m64(_1,_a0) /* Map<any, any>~.get */;\n   let _3 = _2 === null;\n   let _4;\n   if (_3) {\n    _4 = m65(_a0,_1) /* List<int>~.MakeCopy */;\n   }\n   else {\n    _4 = _2;\n   }\n   return _4;\n  }\n  function m31(_i, _a0, _a1) {// List<String>~.fold)\n   let _5 = _a0;\n   let _6 = _a1;\n   let _7 = m66(_i[0],_5, _6) /* array<String>~.foldEx */;\n   return _7;\n  }\n  function m32(_i, _a0, _a1) {// 35.bouncelam$500 (int sum, String add))\n   let _5 = _a0;\n   let _6 = _a1;\n   let _7 = m33(_i[1],_5, _6) /* 17.loclam$lambda<int, int, String>$500 (int sum, String add) */;\n   return _7;\n  }\n  function m33(_i, _a0, _a1) {// 17.loclam$lambda<int, int, String>$500 (int sum, String add))\n   let _4 = m67(_a1,) /* String.getLen */;\n   let _5 = _capi(_a0+_4);\n   return _5;\n  }\n  function m34(_a0) {// String~.NewManual)\n   let _2 = _a0;\n   let _3 = m68(_2) /* Buffer<int>~.NewManual */;\n   let _1 = [_3];\n   return _1;\n  }\n  function m35(_a0) {// int~.NewManual)\n   let _1 = [_a0];\n   return _1;\n  }\n  function m36(_i, _a0) {// List<String>~.forEach)\n   let _4 = _a0;\n   m69(_i[0],_4) /* array<String>~.forEachEx */;\n  }\n  function m37(_i, _a0) {// 39.bouncelam$500 (String part))\n   let _6 = _a0;\n   let _7 = _i[2];\n   let _8 = _i[3];\n   m38(_i[1],_6, _7, _8) /* 17.loclam$lambda<void, String>$500 (String part, int~ off, String~ ret) */;\n   return undefined;\n  }\n  function m38(_i, _a0, _a1, _a2) {// 17.loclam$lambda<void, String>$500 (String part, int~ off, String~ ret))\n   let _5 = _a2;\n   let _6 = m67(_a0,) /* String.getLen */;\n   let _7 = m71(_a1,_6) /* int~.getAndAdd~ */;\n   m70(_a0,_5, _7) /* String.writeTo */;\n  }\n  function m39(_a0) {// SerializationBuilder.makeBetterCopy)\n   let _1 = m63() /* Map<any, any>~.NewManual */;\n   let _2 = m64(_1,_a0) /* Map<any, any>~.get */;\n   let _3 = _2 === null;\n   let _4;\n   if (_3) {\n    _4 = m72(_a0,_1) /* String~.MakeCopy */;\n   }\n   else {\n    _4 = _2;\n   }\n   return _4;\n  }\n  function m40(_i) {// Buffer<int>~.getLen)\n   return _i[0];\n  }\n  function m42(_i, _a0) {// String.getChar)\n   let _3 = _a0;\n   let _4 = m74(_i[0],_3) /* Buffer<int>~.get */;\n   return _4;\n  }\n  function m44(_a0, _a1) {// mmothello.ClientToServer.NewManual)\n   let _2 = [_a0, _a1];\n   return _2;\n  }\n  function m46(_i, _a0) {// Buffer<byte>~.get)\n   let _3 = _i[1 + _a0] || 0;\n   return _3;\n  }\n  function m47(_a0) {// array<String>~.NewManual)\n   let _1 = [_a0, ...Array(_a0).fill(null)];\n   return _1;\n  }\n  function m48(_i) {// array<String>~.getLength)\n   return _i[0];\n  }\n  function m49(_i, _a0) {// array<String>~.forEachi)\n   let _3 = 0;\n   let _4 = (_3<_i[0]);\n   while (_4) {\n    let _5 = _3;\n    let _6 = m79(_i,_5) /* array<String>~.get */;\n    let _7 = _3;\n    m78(_a0,_6, _7) /* lamcall40 */;\n    _3 = _capi(_3+(1));\n    let _9 = (_3<_i[0]);\n    _4 = _9;\n   }\n  }\n  function m50(_i, _a0, _a1) {// 41.bouncelam$500~ (String? val, int idx))\n   let _6 = _a0;\n   let _7 = _a1;\n   let _8 = _i[2];\n   m51(_i[1],_6, _7, _8) /* 18.loclam$lambda<void, String?, int>$500~ (String? val, int idx, array<String>~ next) */;\n   return undefined;\n  }\n  function m51(_i, _a0, _a1, _a2) {// 18.loclam$lambda<void, String?, int>$500~ (String? val, int idx, array<String>~ next))\n   let _6 = _a1;\n   let _7 = _a0;\n   m52(_a2,_6, _7) /* array<String>~.set~ */;\n   return undefined;\n  }\n  function m52(_i, _a0, _a1) {// array<String>~.set~)\n   let _6 = (_a0<(0));\n   if (_6) {\n    let _5 = null;\n    return _5;\n   }\n   let _8 = (_a0>=_i[0]);\n   if (_8) {\n    let _7 = null;\n    return _7;\n   }\n   _i[1 + _a0] = _a1;\n  }\n  function m53(_a0) {// array<int>~.NewManual)\n   let _1 = [_a0, ...Array(_a0).fill(null)];\n   return _1;\n  }\n  function m54(_i) {// array<int>~.getLength)\n   return _i[0];\n  }\n  function m55(_i, _a0) {// array<int>~.forEachi)\n   let _3 = 0;\n   let _4 = (_3<_i[0]);\n   while (_4) {\n    let _5 = _3;\n    let _6 = m81(_i,_5) /* array<int>~.get */;\n    let _7 = _3;\n    m80(_a0,_6, _7) /* lamcall42 */;\n    _3 = _capi(_3+(1));\n    let _9 = (_3<_i[0]);\n    _4 = _9;\n   }\n  }\n  function m56(_i, _a0, _a1) {// 43.bouncelam$500~ (int? val, int idx))\n   let _6 = _a0;\n   let _7 = _a1;\n   let _8 = _i[2];\n   m57(_i[1],_6, _7, _8) /* 23.loclam$lambda<void, int?, int>$500~ (int? val, int idx, array<int>~ next) */;\n   return undefined;\n  }\n  function m57(_i, _a0, _a1, _a2) {// 23.loclam$lambda<void, int?, int>$500~ (int? val, int idx, array<int>~ next))\n   let _6 = _a1;\n   let _7 = _a0;\n   m58(_a2,_6, _7) /* array<int>~.set~ */;\n   return undefined;\n  }\n  function m58(_i, _a0, _a1) {// array<int>~.set~)\n   let _6 = (_a0<(0));\n   if (_6) {\n    let _5 = null;\n    return _5;\n   }\n   let _8 = (_a0>=_i[0]);\n   if (_8) {\n    let _7 = null;\n    return _7;\n   }\n   _i[1 + _a0] = _a1;\n  }\n  function m59(_i, _a0, _a1) {// array<int>~.swap~)\n   let _5 = _a0;\n   let _4 = m81(_i,_5) /* array<int>~.get */;\n   let _6 = _a0;\n   let _7 = _a1;\n   let _8 = m81(_i,_7) /* array<int>~.get */;\n   m58(_i,_6, _8) /* array<int>~.set~ */;\n   let _9 = _a1;\n   let _10 = _4;\n   m58(_i,_9, _10) /* array<int>~.set~ */;\n  }\n  function m60(_i) {// List<int>.getSize)\n   return _i[1];\n  }\n  function m61(_i, _a0, _a1) {// String~.setChar~)\n   let _4 = _a0;\n   let _5 = _a1;\n   m82(_i[0],_4, _5) /* Buffer<int>~.set~ */;\n  }\n  function m62(_i, _a0) {// List<int>.get)\n   let _4 = _a0;\n   let _5 = m81(_i[0],_4) /* array<int>~.get */;\n   return _5;\n  }\n  function m63() {// Map<any, any>~.NewManual)\n   let _2 = m83((16)) /* array<Entries<any, any>~>~.NewManual */;\n   let _0 = [_2, (0)];\n   return _0;\n  }\n  function m64(_i, _a0) {// Map<any, any>~.get)\n   let _5 = _identityHash(_a0);\n   let _6 = _5;\n   let _4 = m84(_6) /* int.sabs */;\n   let _8 = m85(_i[0],) /* array<Entries<any, any>~>~.getLength */;\n   let _7 = _capi(_4%_8);\n   let _10 = _7;\n   let _11 = m86(_i[0],_10) /* array<Entries<any, any>~>~.get */;\n   let _13 = _11 === null;\n   let _12;\n   if (_13) {\n    return null;\n   }\n   else {\n    _12 = _11;\n   }\n   let _9 = _12;\n   let _14 = _a0;\n   let _15 = m87(_9,_14) /* Entries<any, any>~.get */;\n   return _15;\n  }\n  function m65(_i, _a0) {// List<int>~.MakeCopy)\n   let _5 = [];\n   m88(_a0,_i, _5) /* Map<any, any>~.put~ */;\n   let _4 = _5;\n   let _7 = m64(_a0,_i[0]) /* Map<any, any>~.get */;\n   let _8 = _7 === null;\n   let _9;\n   if (_8) {\n    _9 = m89(_i[0],_a0) /* array<int>~.MakeCopyM */;\n   }\n   else {\n    _9 = _7;\n   }\n   let _6 = _9;\n   let _10 = _i[1];\n   _4[0] = _6;\n   _4[1] = _10;\n   return _4;\n  }\n  function m66(_i, _a0, _a1) {// array<String>~.foldEx)\n   let _4 = _a0;\n   let _5 = 0;\n   let _6 = (_5<_i[0]);\n   while (_6) {\n    let _7 = _5;\n    let _10 = m79(_i,_7) /* array<String>~.get */;\n    let _9 = _10 === null;\n    let _8;\n    if (_9) {\n     _9 = false;\n     _8 = null;\n    }\n    else {\n     _9 = true;\n     _8 = _10;\n    }\n    if (_9) {\n     let _11 = _4;\n     let _12 = _8;\n     _4 = m90(_a1,_11, _12) /* lamcall34 */;\n    }\n    _5 = _capi(_5+(1));\n    let _14 = (_5<_i[0]);\n    _6 = _14;\n   }\n   return _4;\n  }\n  function m67(_i) {// String.getLen)\n   let _2 = m40(_i[0],) /* Buffer<int>~.getLen */;\n   return _2;\n  }\n  function m68(_a0) {// Buffer<int>~.NewManual)\n   let _1 = [_a0, ...Array(_a0).fill(0)];\n   return _1;\n  }\n  function m69(_i, _a0) {// array<String>~.forEachEx)\n   let _3 = 0;\n   let _4 = (_3<_i[0]);\n   while (_4) {\n    let _6 = _3;\n    let _8 = m79(_i,_6) /* array<String>~.get */;\n    let _7 = _8 === null;\n    let _5;\n    if (_7) {\n     _7 = false;\n     _5 = null;\n    }\n    else {\n     _7 = true;\n     _5 = _8;\n    }\n    if (_7) {\n     let _9 = _5;\n     m91(_a0,_9) /* lamcall38 */;\n    }\n    _3 = _capi(_3+(1));\n    let _11 = (_3<_i[0]);\n    _4 = _11;\n   }\n  }\n  function m70(_i, _a0, _a1) {// String.writeTo)\n   let _4 = m40(_i[0],) /* Buffer<int>~.getLen */;\n   let _5 = 0;\n   let _6 = (_5<_4);\n   while (_6) {\n    let _7 = _capi(_5+_a1);\n    let _8 = _5;\n    let _9 = m74(_i[0],_8) /* Buffer<int>~.get */;\n    m61(_a0,_7, _9) /* String~.setChar~ */;\n    _5 = _capi(_5+(1));\n    let _11 = (_5<_4);\n    _6 = _11;\n   }\n  }\n  function m71(_i, _a0) {// int~.getAndAdd~)\n   let _3 = _i[0];\n   _i[0] = _capi(_i[0]+_a0);\n   return _3;\n  }\n  function m72(_i, _a0) {// String~.MakeCopy)\n   let _4 = [];\n   m88(_a0,_i, _4) /* Map<any, any>~.put~ */;\n   let _3 = _4;\n   let _6 = m64(_a0,_i[0]) /* Map<any, any>~.get */;\n   let _7 = _6 === null;\n   let _8;\n   if (_7) {\n    _8 = m92(_i[0],_a0) /* Buffer<int>~.MakeCopyM */;\n   }\n   else {\n    _8 = _6;\n   }\n   let _5 = _8;\n   _3[0] = _5;\n   return _3;\n  }\n  function m73(_a0, _a1) {// int.shiftRight)\n   let _2 = _capi(_a0>>_a1);\n   return _2;\n  }\n  function m74(_i, _a0) {// Buffer<int>~.get)\n   let _3 = _i[1 + _a0] || 0;\n   return _3;\n  }\n  function m77(_a0) {// mmothello.ServerToClient.newRefreshBoard)\n   let _2 = _a0;\n   let _3 = m94((0), _2) /* mmothello.ServerToClient.NewManual */;\n   return _3;\n  }\n  function m78(_i, _a0, _a1) {// lamcall40)\n   m50(_i,_a0, _a1) /* 41.bouncelam$500~ (String? val, int idx) */;\n   return undefined;\n  }\n  function m79(_i, _a0) {// array<String>~.get)\n   let _5 = (_a0<(0));\n   if (_5) {\n    let _4 = null;\n    return _4;\n   }\n   let _7 = (_a0>=_i[0]);\n   if (_7) {\n    let _6 = null;\n    return _6;\n   }\n   let _8 = _i[1 + _a0];\n   return _8;\n  }\n  function m80(_i, _a0, _a1) {// lamcall42)\n   m56(_i,_a0, _a1) /* 43.bouncelam$500~ (int? val, int idx) */;\n   return undefined;\n  }\n  function m81(_i, _a0) {// array<int>~.get)\n   let _5 = (_a0<(0));\n   if (_5) {\n    let _4 = null;\n    return _4;\n   }\n   let _7 = (_a0>=_i[0]);\n   if (_7) {\n    let _6 = null;\n    return _6;\n   }\n   let _8 = _i[1 + _a0];\n   return _8;\n  }\n  function m82(_i, _a0, _a1) {// Buffer<int>~.set~)\n   if (_a0 >= 0 && _a0 < _i.length - 1) _i[1 + _a0] = _a1;\n   return undefined;\n  }\n  function m83(_a0) {// array<Entries<any, any>~>~.NewManual)\n   let _1 = [_a0, ...Array(_a0).fill(null)];\n   return _1;\n  }\n  function m84(_a0) {// int.sabs)\n   let _4 = (_a0<(0));\n   if (_4) {\n    let _3 = _capi((0)-_a0);\n    return _3;\n   }\n   return _a0;\n  }\n  function m85(_i) {// array<Entries<any, any>~>~.getLength)\n   return _i[0];\n  }\n  function m86(_i, _a0) {// array<Entries<any, any>~>~.get)\n   let _5 = (_a0<(0));\n   if (_5) {\n    let _4 = null;\n    return _4;\n   }\n   let _7 = (_a0>=_i[0]);\n   if (_7) {\n    let _6 = null;\n    return _6;\n   }\n   let _8 = _i[1 + _a0];\n   return _8;\n  }\n  function m87(_i, _a0) {// Entries<any, any>~.get)\n   let _3 = 0;\n   let _4 = m95(_i[0],) /* List<Entry<any, any>>~.getSize */;\n   let _5 = (_3<_4);\n   while (_5) {\n    let _7 = _3;\n    let _8 = m96(_i[0],_7) /* List<Entry<any, any>>~.get */;\n    let _10 = _8 === null;\n    let _9;\n    if (_10) {\n     return null;\n    }\n    else {\n     _9 = _8;\n    }\n    let _6 = _9;\n    let _11 = m97(_6,) /* Entry<any, any>.getKey */;\n    let _13 = (_11) === (_a0);\n    if (_13) {\n     let _12 = m98(_6,) /* Entry<any, any>.getValue */;\n     return _12;\n    }\n    _3 = _capi(_3+(1));\n    let _15 = m95(_i[0],) /* List<Entry<any, any>>~.getSize */;\n    let _16 = (_3<_15);\n    _5 = _16;\n   }\n   let _17 = null;\n   return _17;\n  }\n  function m88(_i, _a0, _a1) {// Map<any, any>~.put~)\n   let _6 = _identityHash(_a0);\n   let _7 = _6;\n   let _5 = m84(_7) /* int.sabs */;\n   let _9 = m85(_i[0],) /* array<Entries<any, any>~>~.getLength */;\n   let _8 = _capi(_5%_9);\n   let _11 = _8;\n   let _12 = m86(_i[0],_11) /* array<Entries<any, any>~>~.get */;\n   let _14 = _12 === null;\n   let _13;\n   if (_14) {\n    let _15 = _8;\n    _13 = m99(_i,_15) /* Map<any, any>~.putNew~ */;\n   }\n   else {\n    _13 = _12;\n   }\n   let _10 = _13;\n   let _17 = _a0;\n   let _18 = _a1;\n   let _16 = m100(_10,_17, _18) /* Entries<any, any>~.put~ */;\n   let _19 = _16 === null;\n   _19 = (_19===(false));\n   let _33 = (_19===(false));\n   if (_33) {\n    _i[1] = _capi(_i[1]+(1));\n    let _24 = m85(_i[0],) /* array<Entries<any, any>~>~.getLength */;\n    let _23 = _capi(_24*(2));\n    let _32 = (_i[1]>=_23);\n    if (_32) {\n     let _27 = (_23<(0));\n     if (_27) {\n     }\n     else {\n      let _28 = _i[0];\n      let _29 = _23;\n      _i[0] = m83(_29) /* array<Entries<any, any>~>~.NewManual */;\n      _i[1] = 0;\n      let _31 = [(500), _i];\n      m101(_28,_31) /* array<Entries<any, any>~>~.forEachEx */;\n     }\n    }\n   }\n   return _16;\n  }\n  function m89(_i, _a0) {// array<int>~.MakeCopyM)\n   let _4 = _i[0];\n   let _3 = m53(_4) /* array<int>~.NewManual */;\n   let _5 = _i;\n   let _6 = _3;\n   m88(_a0,_5, _6) /* Map<any, any>~.put~ */;\n   let _7 = 0;\n   let _8 = (_7<_i[0]);\n   while (_8) {\n    let _9 = _7;\n    let _12 = m81(_i,_9) /* array<int>~.get */;\n    let _11 = _12 === null;\n    let _10;\n    if (_11) {\n     _11 = false;\n     _10 = 0;\n    }\n    else {\n     _11 = true;\n     _10 = _12;\n    }\n    if (_11) {\n     let _13 = _7;\n     let _14 = _10;\n     m58(_3,_13, _14) /* array<int>~.set~ */;\n    }\n    _7 = _capi(_7+(1));\n    let _16 = (_7<_i[0]);\n    _8 = _16;\n   }\n   return _3;\n  }\n  function m90(_i, _a0, _a1) {// lamcall34)\n   let _4 = m32(_i,_a0, _a1) /* 35.bouncelam$500 (int sum, String add) */;\n   return _4;\n  }\n  function m91(_i, _a0) {// lamcall38)\n   m37(_i,_a0) /* 39.bouncelam$500 (String part) */;\n   return undefined;\n  }\n  function m92(_i, _a0) {// Buffer<int>~.MakeCopyM)\n   let _3 = [..._i];\n   let _4 = _i;\n   let _5 = _3;\n   m88(_a0,_4, _5) /* Map<any, any>~.put~ */;\n   return _3;\n  }\n  function m94(_a0, _a1) {// mmothello.ServerToClient.NewManual)\n   let _2 = [_a0, _a1];\n   return _2;\n  }\n  function m95(_i) {// List<Entry<any, any>>~.getSize)\n   return _i[1];\n  }\n  function m96(_i, _a0) {// List<Entry<any, any>>~.get)\n   let _4 = _a0;\n   let _5 = m105(_i[0],_4) /* array<Entry<any, any>>~.get */;\n   return _5;\n  }\n  function m97(_i) {// Entry<any, any>.getKey)\n   return _i[0];\n  }\n  function m98(_i) {// Entry<any, any>.getValue)\n   return _i[1];\n  }\n  function m99(_i, _a0) {// Map<any, any>~.putNew~)\n   let _4 = m106() /* Entries<any, any>~.NewManual */;\n   let _5 = _a0;\n   let _6 = _4;\n   m107(_i[0],_5, _6) /* array<Entries<any, any>~>~.set~ */;\n   return _4;\n  }\n  function m100(_i, _a0, _a1) {// Entries<any, any>~.put~)\n   let _5 = _a0;\n   let _6 = _a1;\n   let _4 = m108(_5, _6) /* Entry<any, any>.NewManual */;\n   let _7 = m109(_i[0],) /* List<Entry<any, any>>~.getLen */;\n   let _8 = 0;\n   let _9 = (_8<_7);\n   while (_9) {\n    let _11 = _8;\n    let _12 = m96(_i[0],_11) /* List<Entry<any, any>>~.get */;\n    let _14 = _12 === null;\n    let _13;\n    if (_14) {\n     return null;\n    }\n    else {\n     _13 = _12;\n    }\n    let _10 = _13;\n    let _15 = m97(_10,) /* Entry<any, any>.getKey */;\n    let _19 = (_15) === (_a0);\n    if (_19) {\n     let _16 = _8;\n     let _17 = _4;\n     m110(_i[0],_16, _17) /* List<Entry<any, any>>~.set~ */;\n     let _18 = m98(_10,) /* Entry<any, any>.getValue */;\n     return _18;\n    }\n    _8 = _capi(_8+(1));\n    let _21 = (_8<_7);\n    _9 = _21;\n   }\n   let _22 = _4;\n   m111(_i[0],_22) /* List<Entry<any, any>>~.add~ */;\n   let _23 = null;\n   return _23;\n  }\n  function m101(_i, _a0) {// array<Entries<any, any>~>~.forEachEx)\n   let _3 = 0;\n   let _4 = (_3<_i[0]);\n   while (_4) {\n    let _6 = _3;\n    let _8 = m86(_i,_6) /* array<Entries<any, any>~>~.get */;\n    let _7 = _8 === null;\n    let _5;\n    if (_7) {\n     _7 = false;\n     _5 = null;\n    }\n    else {\n     _7 = true;\n     _5 = _8;\n    }\n    if (_7) {\n     let _9 = _5;\n     m112(_a0,_9) /* lamcall50 */;\n    }\n    _3 = _capi(_3+(1));\n    let _11 = (_3<_i[0]);\n    _4 = _11;\n   }\n  }\n  function m102(_i, _a0) {// 51.bouncelam$500~ (Entries<any, any>~ oldEnt))\n   let _4 = _a0;\n   m103(_i[1],_4) /* 44.loclam$lambda<void, Entries<any, any>~>$500~ (Entries<any, any>~ oldEnt) */;\n   return undefined;\n  }\n  function m103(_i, _a0) {// 44.loclam$lambda<void, Entries<any, any>~>$500~ (Entries<any, any>~ oldEnt))\n   let _5 = [(500), _i];\n   m113(_a0,_5) /* Entries<any, any>~.forEach */;\n  }\n  function m104(_i, _a0, _a1) {// Buffer<byte>~.set~)\n   if (_a0 >= 0 && _a0 < _i.length - 1) _i[1 + _a0] = _a1;\n   return undefined;\n  }\n  function m105(_i, _a0) {// array<Entry<any, any>>~.get)\n   let _5 = (_a0<(0));\n   if (_5) {\n    let _4 = null;\n    return _4;\n   }\n   let _7 = (_a0>=_i[0]);\n   if (_7) {\n    let _6 = null;\n    return _6;\n   }\n   let _8 = _i[1 + _a0];\n   return _8;\n  }\n  function m106() {// Entries<any, any>~.NewManual)\n   let _1 = m116() /* List<Entry<any, any>>~.NewManual */;\n   let _0 = [_1];\n   return _0;\n  }\n  function m107(_i, _a0, _a1) {// array<Entries<any, any>~>~.set~)\n   let _6 = (_a0<(0));\n   if (_6) {\n    let _5 = null;\n    return _5;\n   }\n   let _8 = (_a0>=_i[0]);\n   if (_8) {\n    let _7 = null;\n    return _7;\n   }\n   _i[1 + _a0] = _a1;\n  }\n  function m108(_a0, _a1) {// Entry<any, any>.NewManual)\n   let _2 = [_a0, _a1];\n   return _2;\n  }\n  function m109(_i) {// List<Entry<any, any>>~.getLen)\n   return _i[1];\n  }\n  function m110(_i, _a0, _a1) {// List<Entry<any, any>>~.set~)\n   let _6 = (_a0>=_i[1]);\n   if (_6) {\n    let _5 = null;\n    return _5;\n   }\n   let _7 = _a0;\n   let _8 = _a1;\n   let _9 = m117(_i[0],_7, _8) /* array<Entry<any, any>>~.set~ */;\n   return _9;\n  }\n  function m111(_i, _a0) {// List<Entry<any, any>>~.add~)\n   let _4 = m118(_i[0],) /* array<Entry<any, any>>~.getLength */;\n   let _11 = (_i[1]===_4);\n   if (_11) {\n    let _6 = m118(_i[0],) /* array<Entry<any, any>>~.getLength */;\n    let _8 = _capi(_6*(2));\n    let _5 = m119(_8) /* array<Entry<any, any>>~.NewManual */;\n    let _10 = [(500), _i, _5];\n    m120(_i[0],_10) /* array<Entry<any, any>>~.forEachi */;\n    _i[0] = _5;\n   }\n   let _12 = _i[1];\n   let _13 = _a0;\n   m117(_i[0],_12, _13) /* array<Entry<any, any>>~.set~ */;\n   _i[1] = _capi(_i[1]+(1));\n  }\n  function m112(_i, _a0) {// lamcall50)\n   m102(_i,_a0) /* 51.bouncelam$500~ (Entries<any, any>~ oldEnt) */;\n   return undefined;\n  }\n  function m113(_i, _a0) {// Entries<any, any>~.forEach)\n   let _3 = _a0;\n   m123(_i[0],_3) /* List<Entry<any, any>>~.forEach */;\n  }\n  function m114(_i, _a0) {// 53.bouncelam$500~ (Entry<any, any> ent))\n   let _4 = _a0;\n   m115(_i[1],_4) /* 44.loclam$lambda<void, Entry<any, any>>$500~ (Entry<any, any> ent) */;\n   return undefined;\n  }\n  function m115(_i, _a0) {// 44.loclam$lambda<void, Entry<any, any>>$500~ (Entry<any, any> ent))\n   let _4 = m97(_a0,) /* Entry<any, any>.getKey */;\n   let _5 = m98(_a0,) /* Entry<any, any>.getValue */;\n   m88(_i,_4, _5) /* Map<any, any>~.put~ */;\n  }\n  function m116() {// List<Entry<any, any>>~.NewManual)\n   let _2 = m119((5)) /* array<Entry<any, any>>~.NewManual */;\n   let _0 = [_2, (0)];\n   return _0;\n  }\n  function m117(_i, _a0, _a1) {// array<Entry<any, any>>~.set~)\n   let _6 = (_a0<(0));\n   if (_6) {\n    let _5 = null;\n    return _5;\n   }\n   let _8 = (_a0>=_i[0]);\n   if (_8) {\n    let _7 = null;\n    return _7;\n   }\n   _i[1 + _a0] = _a1;\n  }\n  function m118(_i) {// array<Entry<any, any>>~.getLength)\n   return _i[0];\n  }\n  function m119(_a0) {// array<Entry<any, any>>~.NewManual)\n   let _1 = [_a0, ...Array(_a0).fill(null)];\n   return _1;\n  }\n  function m120(_i, _a0) {// array<Entry<any, any>>~.forEachi)\n   let _3 = 0;\n   let _4 = (_3<_i[0]);\n   while (_4) {\n    let _5 = _3;\n    let _6 = m105(_i,_5) /* array<Entry<any, any>>~.get */;\n    let _7 = _3;\n    m124(_a0,_6, _7) /* lamcall54 */;\n    _3 = _capi(_3+(1));\n    let _9 = (_3<_i[0]);\n    _4 = _9;\n   }\n  }\n  function m121(_i, _a0, _a1) {// 55.bouncelam$500~ (Entry<any, any>? val, int idx))\n   let _6 = _a0;\n   let _7 = _a1;\n   let _8 = _i[2];\n   m122(_i[1],_6, _7, _8) /* 47.loclam$lambda<void, Entry<any, any>?, int>$500~ (Entry<any, any>? val, int idx, array<Entry<any, any>>~ next) */;\n   return undefined;\n  }\n  function m122(_i, _a0, _a1, _a2) {// 47.loclam$lambda<void, Entry<any, any>?, int>$500~ (Entry<any, any>? val, int idx, array<Entry<any, any>>~ next))\n   let _6 = _a1;\n   let _7 = _a0;\n   m117(_a2,_6, _7) /* array<Entry<any, any>>~.set~ */;\n   return undefined;\n  }\n  function m123(_i, _a0) {// List<Entry<any, any>>~.forEach)\n   let _4 = _a0;\n   m125(_i[0],_4) /* array<Entry<any, any>>~.forEachEx */;\n  }\n  function m124(_i, _a0, _a1) {// lamcall54)\n   m121(_i,_a0, _a1) /* 55.bouncelam$500~ (Entry<any, any>? val, int idx) */;\n   return undefined;\n  }\n  function m125(_i, _a0) {// array<Entry<any, any>>~.forEachEx)\n   let _3 = 0;\n   let _4 = (_3<_i[0]);\n   while (_4) {\n    let _6 = _3;\n    let _8 = m105(_i,_6) /* array<Entry<any, any>>~.get */;\n    let _7 = _8 === null;\n    let _5;\n    if (_7) {\n     _7 = false;\n     _5 = null;\n    }\n    else {\n     _7 = true;\n     _5 = _8;\n    }\n    if (_7) {\n     let _9 = _5;\n     m126(_a0,_9) /* lamcall52 */;\n    }\n    _3 = _capi(_3+(1));\n    let _11 = (_3<_i[0]);\n    _4 = _11;\n   }\n  }\n  function m126(_i, _a0) {// lamcall52)\n   m114(_i,_a0) /* 53.bouncelam$500~ (Entry<any, any> ent) */;\n   return undefined;\n  }\n\nfunction MAIN(_binding, ...inArgs) {\n const _io = new I$O(_binding);\n  function m0() {// mmothello.Client.game)\n   let _0 = [];\n   _doLog('--> [s 14]', `Client started`);\n   let _2 = _0;\n   let _1 = m1(_2) /* mmothello.Client~.NewManual */;\n   let _4 = [(500), _1];\n   return _4;\n  }\n  function m2(_i) {// 15.bouncelam$500 ())\n   let _3 = _i[1];\n   m3(_3) /* 10.loclam$lambda<void>?$500 (mmothello.Client~ cl) */;\n   return undefined;\n  }\n  function m3(_a0) {// 10.loclam$lambda<void>?$500 (mmothello.Client~ cl))\n   m5(_a0,) /* mmothello.Client~.update~ */;\n  }\n  function m5(_i) {// mmothello.Client~.update~)\n   m7(_i,) /* mmothello.Client~.handleIncomingMessages~ */;\n   let _5 = m8() /* mmothello.Client.ClientBinding~.getClick */;\n   let _4 = _5 === null;\n   let _3;\n   if (_4) {\n    _4 = false;\n    _3 = null;\n   }\n   else {\n    _4 = true;\n    _3 = _5;\n   }\n   if (_4) {\n    let _6 = m9() /* StringBuilder~.NewManual */;\n    let _7 = [[12,71,111,116,32,99,108,105,99,107,32,64,32]];\n    m10(_6,_7) /* StringBuilder~.add~ */;\n    let _8 = m11(_3,) /* mmothello.Client.Click.getX */;\n    _7 = m12(_8) /* int.Stringify */;\n    m10(_6,_7) /* StringBuilder~.add~ */;\n    _7 = [[3,32,124,32]];\n    m10(_6,_7) /* StringBuilder~.add~ */;\n    let _9 = m13(_3,) /* mmothello.Client.Click.getY */;\n    _7 = m12(_9) /* int.Stringify */;\n    m10(_6,_7) /* StringBuilder~.add~ */;\n    _7 = m14(_6,) /* StringBuilder~.getResult */;\n    m15(_7,) /* String.OutputBytes */;\n     _io.flushDirect(-8);\n    let _10 = m11(_3,) /* mmothello.Client.Click.getX */;\n    let _11 = m13(_3,) /* mmothello.Client.Click.getY */;\n    let _12 = m18(_10, _11) /* mmothello.ClientToServer.OnClick.NewManual */;\n    let _13 = m17(_12) /* mmothello.ClientToServer.newOnClick */;\n    m16(_13) /* mmothello.Client.ClientBinding~.postToServer */;\n   }\n  }\n  function m7(_i) {// mmothello.Client~.handleIncomingMessages~)\n   let _3 = true;\n   while (_3) {\n    let _4 = m19() /* mmothello.Client.ClientBinding~.getIncomingMessage */;\n    let _6 = _4 === null;\n    let _5;\n    if (_6) {\n     return undefined;\n    }\n    else {\n     _5 = _4;\n    }\n    let _7 = _5;\n    let _10 = m20(_7,) /* mmothello.ServerToClient.getRefreshBoard */;\n    let _9 = _10 === null;\n    let _8;\n    if (_9) {\n     _9 = false;\n     _8 = null;\n    }\n    else {\n     _9 = true;\n     _8 = _10;\n    }\n    if (_9) {\n     let _11 = 0;\n     let _13 = (_11<(16));\n     while (_13) {\n      let _14 = 0;\n      let _16 = (_14<(16));\n      while (_16) {\n       let _17 = _11;\n       let _18 = _14;\n       let _19 = m21(_i[1],_17, _18) /* mmothello.Board.get */;\n       let _20 = _11;\n       let _21 = _14;\n       let _22 = m21(_8,_20, _21) /* mmothello.Board.get */;\n       let _26 = (_19!==_22);\n       if (_26) {\n        let _23 = _11;\n        let _24 = _14;\n        let _25 = _22;\n        m22(_23, _24, _25) /* mmothello.Client.ClientBinding~.setBoard */;\n       }\n       _14 = _capi(_14+(1));\n       let _29 = (_14<(16));\n       _16 = _29;\n      }\n      _11 = _capi(_11+(1));\n      let _32 = (_11<(16));\n      _13 = _32;\n     }\n     _i[1] = _8;\n    }\n    else {\n     _doLog('--> [s 24]', `ERR unknown message type`);\n    }\n    _3 = (true);\n   }\n  }\n  function m8() {// mmothello.Client.ClientBinding~.getClick)\n    _io.flushDirect(100);\n   let _0 = _io.ir.getIB();\n   if (_0) {\n    let _1 = m23() /* mmothello.Client.Click.Read */;\n    return _1;\n   }\n   let _2 = null;\n   return _2;\n  }\n  function m15(_i) {// String.OutputBytes)\n   let _2 = m40(_i[0],) /* Buffer<int>~.getLen */;\n   let _3 = 0;\n   let _4 = (_3<_2);\n   while (_4) {\n    let _5 = _3;\n    let _6 = m42(_i,_5) /* String.getChar */;\n    m41(_6) /* int.OutputUnicodeBytes */;\n    _3 = _capi(_3+(1));\n    let _8 = (_3<_2);\n    _4 = _8;\n   }\n  }\n  function m16(_a0) {// mmothello.Client.ClientBinding~.postToServer)\n   m43(_a0,) /* mmothello.ClientToServer.Write */;\n    _io.flushDirect(101);\n   let _1 = _io.ir.getIB();\n   if (_1) {\n    return undefined;\n   }\n   let _2 = null;\n   return _2;\n  }\n  function m19() {// mmothello.Client.ClientBinding~.getIncomingMessage)\n    _io.flushDirect(102);\n   let _0 = _io.ir.getIB();\n   if (_0) {\n    let _1 = m45() /* mmothello.ServerToClient.Read */;\n    return _1;\n   }\n   let _2 = null;\n   return _2;\n  }\n  function m22(_a0, _a1, _a2) {// mmothello.Client.ClientBinding~.setBoard)\n   _io.ow.addI32(_a0);\n   _io.ow.addI32(_a1);\n   _io.ow.addI8(_a2);\n    _io.flushDirect(103);\n   let _3 = _io.ir.getIB();\n   if (_3) {\n    return undefined;\n   }\n   let _4 = null;\n   return _4;\n  }\n  function m23() {// mmothello.Client.Click.Read)\n   let _0 = _io.ir.getI32();\n   let _1 = _io.ir.getI32();\n   let _2 = [_0, _1];\n   return _2;\n  }\n  function m41(_a0) {// int.OutputUnicodeBytes)\n   let _2 = _capi((127)&_a0);\n   let _4 = (_2===_a0);\n   if (_4) {\n    let _3 = _capb(_a0);\n    _io.ow.addI8(_3);\n    return undefined;\n   }\n   let _6 = _capi((65535)&_a0);\n   let _18 = (_6===_a0);\n   if (_18) {\n    let _7 = _a0;\n    let _10 = m73(_7, (6)) /* int.shiftRight */;\n    let _11 = _capi((192)|_10);\n    let _12 = _capb(_11);\n    _io.ow.addI8(_12);\n    let _15 = _capi(_a0&(63));\n    let _16 = _capi((128)|_15);\n    let _17 = _capb(_16);\n    _io.ow.addI8(_17);\n    return undefined;\n   }\n   let _20 = _capi((16777215)&_a0);\n   let _40 = (_20===_a0);\n   if (_40) {\n    let _21 = _a0;\n    let _24 = m73(_21, (12)) /* int.shiftRight */;\n    let _25 = _capi((224)|_24);\n    let _26 = _capb(_25);\n    _io.ow.addI8(_26);\n    let _27 = _a0;\n    let _29 = m73(_27, (6)) /* int.shiftRight */;\n    let _32 = _capi(_29&(63));\n    let _33 = _capi((128)|_32);\n    let _34 = _capb(_33);\n    _io.ow.addI8(_34);\n    let _37 = _capi(_a0&(63));\n    let _38 = _capi((128)|_37);\n    let _39 = _capb(_38);\n    _io.ow.addI8(_39);\n    return undefined;\n   }\n   let _41 = _a0;\n   let _44 = m73(_41, (18)) /* int.shiftRight */;\n   let _45 = _capi((240)|_44);\n   let _46 = _capb(_45);\n   _io.ow.addI8(_46);\n   let _47 = _a0;\n   let _49 = m73(_47, (12)) /* int.shiftRight */;\n   let _52 = _capi(_49&(63));\n   let _53 = _capi((128)|_52);\n   let _54 = _capb(_53);\n   _io.ow.addI8(_54);\n   let _55 = _a0;\n   let _57 = m73(_55, (6)) /* int.shiftRight */;\n   let _60 = _capi(_57&(63));\n   let _61 = _capi((128)|_60);\n   let _62 = _capb(_61);\n   _io.ow.addI8(_62);\n   let _65 = _capi(_a0&(63));\n   let _66 = _capi((128)|_65);\n   let _67 = _capb(_66);\n   _io.ow.addI8(_67);\n  }\n  function m43(_i) {// mmothello.ClientToServer.Write)\n   _io.ow.addI8(_i[0]);\n   let _3 = _i[1];\n   m75(_3,) /* mmothello.ClientToServer.OnClick.Write */;\n   return undefined;\n  }\n  function m45() {// mmothello.ServerToClient.Read)\n   let _0 = _io.ir.getI8();\n   let _1 = m76() /* mmothello.Board.Read */;\n   let _2 = _1;\n   let _3 = m77(_2) /* mmothello.ServerToClient.newRefreshBoard */;\n   return _3;\n  }\n  function m75(_i) {// mmothello.ClientToServer.OnClick.Write)\n   _io.ow.addI32(_i[0]);\n   _io.ow.addI32(_i[1]);\n  }\n  function m76() {// mmothello.Board.Read)\n   let _0 = m93() /* Buffer<byte>~.ReadM */;\n   let _1 = [_0];\n   return _1;\n  }\n  function m93() {// Buffer<byte>~.ReadM)\n   let _0 = _io.ir.getI32();\n   let _2 = _0;\n   let _1 = m6(_2) /* Buffer<byte>~.NewManual */;\n   let _3 = 0;\n   let _4 = (_3<_0);\n   while (_4) {\n    let _5 = _io.ir.getI8();\n    let _6 = _3;\n    let _7 = _5;\n    m104(_1,_6, _7) /* Buffer<byte>~.set~ */;\n    _3 = _capi(_3+(1));\n    let _9 = (_3<_0);\n    _4 = _9;\n   }\n   return _1;\n  }\n  function m127(_i) {// lamcall14)\n   m2(_i,) /* 15.bouncelam$500 () */;\n   return undefined;\n  }\nconst _re = m0(null, ...inArgs);\nif (_re) {\n  _re.call = () => m127(_re, _re[0]);\n}\nreturn _re;\n}\n\n\n // === PROG END \n\n\n      if (true) { \n\n        if ( true && module.exports) { exports = module.exports = MAIN; } \n\n        exports.ClientRaw = MAIN;\n      } else {}\n\n    function niceMAIN(binding) {\n      return MAIN((mthId, src, dst, srcEnd) => {\n        switch (mthId) {\ncase 100: { //  mmothello.Client.Click? getClick~()\nconst res = binding.getClick();\nif (res === null) { dst.addI8(0); }\nelse {\n  dst.addI8(1);dst.addI32(res.x), dst.addI32(res.y)}\nbreak;\n}case 101: { //  void? postToServer~(mmothello.ClientToServer msg)\nconst res = binding.postToServer(src.buffer.slice(src.pos, srcEnd));\nif (res === null) { dst.addI8(0); }\nelse {\n  dst.addI8(1);}\nbreak;\n}case 102: { //  mmothello.ServerToClient? getIncomingMessage~()\nconst res = binding.getIncomingMessage();\nif (res === null) { dst.addI8(0); }\nelse {\n  dst.addI8(1);  for (let i = 0; i < res.length; ++i) { dst.addI8(res[i]); }}\nbreak;\n}case 103: { //  void? setBoard~(int x, int y, byte color)\nconst res = binding.setBoard(src.getI32(), src.getI32(), src.getI8());\nif (res === null) { dst.addI8(0); }\nelse {\n  dst.addI8(1);}\nbreak;\n}\n\n            default: {\n              throw new Error(`Bad mthId ${mthId}`);\n            }\n          }\n        });\n      }\n      \n      if (true) {\n        exports.Client = niceMAIN;\n      } else {}\n    if (true) {\n      exports.StreamEncoder = StreamEncoder;\n    } else {}\n    if (true) {\n      exports.StreamDecoder = StreamDecoder;\n    } else {}\n})();\n\nexports.Types = {\n  \n};\nexports.VERSION = '968056374';\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../node_modules/webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\"), __webpack_require__(/*! ./../node_modules/process/browser.js */ \"./node_modules/process/browser.js\")))\n\n//# sourceURL=webpack:///./src/Client.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const { Client } = __webpack_require__(/*! ./Client */ \"./src/Client.js\");\n\nconst DATA_URL = 'https://mmothello-data.s3.eu-central-1.amazonaws.com/px8x8';\n\nconst root = document.querySelector('#root');\nconst status = document.querySelector('#status');\n/** @type {HTMLDivElement} */\nconst timer = document.querySelector('#timer');\n\nfunction setStatus(stat) {\n  status.innerText = `Status: ${stat}`;\n}\n\nconst sessionLengthMs = 1000 * 60; // * 5;\nlet bgBackgroundTimer;\n\nconst playerId = window.location.hash.slice(1);\nif (!playerId) {\n  document.body.innerHTML = 'Missing playerId, add playerId with theurl.com#id_here';\n  window.onhashchange = () => window.location.reload();\n  throw new Error('Abort');\n}\n\nasync function init() {\n  /** @type {WebSocket} */\n  let socket;\n  let connected = false;\n  /** @type {{ call: () => void }} */\n  let client;\n  let clientAutoRunner;\n  let inactivityCounter = 0;\n\n  setInterval(() => {\n    if (socket && socket.bufferedAmount > 0) {\n      console.log('Buffered:', socket.bufferedAmount);\n    }\n  }, 100);\n\n  const playerColors = [\n    'red','blue','green','black','cyan','magenta','pink','purple','orange'\n  ];\n\n  const reconnect = () => {\n    if (socket) {\n      socket.close();\n      client = null;\n      clearInterval(clientAutoRunner);\n    }\n\n    root.innerHTML = '';\n\n    setStatus('Connecting');\n    connected = false;\n    socket = new WebSocket(\"wss://qnrk3f4ghb.execute-api.eu-central-1.amazonaws.com/Prod?agent=foo\");\n    // socket.binaryType = 'arraybuffer';\n\n    const incomingMessages = [];\n    const localSocket = socket;\n    socket.onopen = function (event) {\n      if (socket === localSocket) {\n        setStatus('Connected');\n        connected = true;\n\n        let lastClicked = {};\n\n        for (let y = 0; y < 16; y++) {\n          for (let x = 0; x < 16; x++) {\n            const cell = document.createElement('div');\n            cell.className = 'cell';\n            cell.setAttribute('data-x', x);\n            cell.setAttribute('data-y', y);\n            if (x >= 4 && x <= 11 && y >= 4 && y <= 11) {\n              cell.classList.add('inner');\n            }\n            cell.style.setProperty('--data-color', 'cyan');\n            // TODO onlclick\n            cell.onclick = () => {\n              inactivityCounter = 0;\n              lastClicked.x = x;\n              lastClicked.y = y;\n\n              if (client) {\n                client.call();\n              }\n            };\n            root.appendChild(cell);\n          }\n        }\n\n        client = Client({\n          getIncomingMessage: () => incomingMessages.shift() || null,\n          getClick: () => {\n            const { x, y } = lastClicked;\n            if (x === undefined || y === undefined) {\n              return null;\n            }\n            lastClicked.x = undefined;\n            lastClicked.y = undefined;\n            return { x, y };\n          },\n          postToServer: msg => {\n            const outgoing = JSON.stringify({\n              action: 'sendmessage',\n              target: 'server',\n              type: 'kl',\n              pid: playerId,\n              payload: new TextDecoder().decode(msg),\n            });\n            socket.send(outgoing);\n          },\n          setBoard: (x, y, color) => {\n            console.log('setBoard:', x, y, color);\n            const hit = document.querySelector(`.cell[data-x=\"${x}\"][data-y=\"${y}\"]`);\n            if (hit) {\n              // const newBg = `#${`${Math.abs(color).toString(16)}`.padStart(6, '0')}`;\n              // console.log(newBg);\n              hit.style.backgroundColor = playerColors[Math.abs(color) % playerColors.length];\n            }\n            // cell';\n            // cell.setAttribute('data-x', x);cw\n            // cell.setAttribute('data-y', y);\n            // cell.style.setProp\n          },\n          // foo:\n        });\n        clientAutoRunner = setInterval(() => {\n          client && client.call();\n        }, 100);\n\n      }\n    };\n\n    socket.onmessage = (event) => {\n      if (socket !== localSocket) {\n        return;\n      }\n      const parsed = JSON.parse(event.data);\n      if (parsed.target !== 'client') {\n        return;\n      }\n\n      if (parsed.type === 'kl') {\n        console.log('decoded incoming payload ENCODED:', parsed.payload);\n        const decoded = new TextEncoder().encode(parsed.payload);\n        console.log('decoded incoming payload DECODED:', decoded);\n        incomingMessages.push(decoded);\n\n        if (client) {\n          client.call();\n        }\n      } else if (parsed.type === 'meta') {\n        console.log('onMetaMessage:', parsed);\n      }\n    }\n\n    socket.onerror = err => {\n      if (socket === localSocket) {\n        console.log('onerror', err);\n      }\n    }\n\n    socket.onclose = err => {\n      if (socket === localSocket) {\n        console.log('onclose', err);\n        setStatus('Disconnected');\n      }\n    }\n  };\n\n  let lastSessionId = null;\n  let transitionSessionTimer;\n  const transitionSession = () => {\n    // TODO only autoConnect if you made any moves last game\n    const now = Date.now();\n    const sessionId = now - (now % sessionLengthMs);\n    if (sessionId !== lastSessionId) {\n\n      ++inactivityCounter;\n      if (inactivityCounter >= 3) {\n        setStatus('Disconnected due to inactivity, reload page to rejoin')\n        clearInterval(transitionSessionTimer);\n        clearInterval(bgBackgroundTimer);\n        if (socket) {\n          socket.close();\n        }\n        socket = null;\n      } else {\n        reconnect();\n      }\n    }\n    lastSessionId = sessionId;\n  };\n\n  transitionSession();\n  transitionSessionTimer = setInterval(transitionSession, 1000);\n\n  /** @type {HTMLButtonElement} */\n  const pingButton = document.querySelector('#ping');\n  pingButton.onclick = () => {\n    if (connected) {\n      const salt = `${Math.random()}`;\n      console.log(new Date(), 'Sending', salt);\n      socket.send(JSON.stringify({\n        action: 'sendmessage',\n        target: 'server',\n        type: 'meta',\n        salt\n      }));\n    }\n  };\n}\n\ninit()\n  .catch(err => console.warn('Failed to init', err));\n\n\nconst timerBg = document.createElement('div');\ntimerBg.className = 'timerBg';\ntimer.appendChild(timerBg);\n\nconst timerLabel = document.createElement('p');\ntimer.appendChild(timerLabel);\n\nconst updateTimer = () => {\n  const now = Date.now();\n  const sessionId = now - (now % sessionLengthMs);\n  timerLabel.innerText = `Session ${sessionId}`;\n\n  const progress = (now % sessionLengthMs) * 100 / sessionLengthMs;\n  if (progress >= 90) {\n    timerBg.style.backgroundColor = 'red';\n  } else {\n    timerBg.style.backgroundColor = 'green';\n\n  }\n  timerBg.style.width = `${progress}%`;\n};\n\nupdateTimer();\nbgBackgroundTimer = setInterval(updateTimer, 1000);\n\n\n//# sourceURL=webpack:///./src/index.js?");

/***/ })

/******/ });
#include mmothello/[
  ClientToServer,
  ServerToClient,
  Board
]
#include util/Counter

binding ServerBinding {
  ClientToServer? receiveIncomingMessage();
  byte? getLastIncomingMessageOwner();
  void? postMessage(ServerToClient msg);
  void? reportLeader(byte pid);
}

worker Server {
  ServerBinding~ bind;
  Board~ board;

  new(ServerBinding~ bind)
    board: new()
    ;

  bool handleIncomingMessages~() {
    $dispatchUpdate = false;
    while (true) {
      $msg = bind.receiveIncomingMessage() ?: return dispatchUpdate;
      if ($cl = msg.onClick) {
        $player = bind.getLastIncomingMessageOwner() ?: return dispatchUpdate;
        $x = cl.x;
        $y = cl.y;

        if (board.isLegalMove(x, y, player)) {
          board.set(x, y, player);
          dispatchUpdate = true;

          .void(int, int) doSearch = (dx, dy) -> {
            board.searchAndFlip(x + dx, y + dy, dx, dy, player, false);
          };

          // Search in + sign direction
          doSearch(1, 0); // RIGHT
          doSearch(-1, 0); // LEFT
          doSearch(0, -1); // UP
          doSearch(0, 1); // DOWN

          // Search in X direction (diagonals)
          doSearch(1, 1); // BOT-RIGHT
          doSearch(1, -1); // TOP-RIGHT
          doSearch(-1, 1); // BOT-LEFT
          doSearch(-1, -1); // TOP-LEFT
        }
      }
      if (msg.requestFullUpdate??) {
        dispatchUpdate = true;
      }
    }
  }

  void update~() {
    if (handleIncomingMessages()) {
      bind.postMessage(.newRefreshBoard(copy(board)));

      Counter<byte>~ score = new();
      for ($x = 0; < 16) {
        for ($y = 0; < 16) {
          $pid = board.get(x, y);
          if (pid != 0b) {
            score.add(pid);
          }
        }
      }
      if ($winner = score.result.entries.getSorted((lhs, rhs): rhs.value - lhs.value).first) {
        bind.reportLeader(winner.key);
      }


    }
  }

  static .void()? game(ServerBinding~ bind) {
    trace "Server started";
    Server~ gm = new(bind);
    return () -> {
      gm.update();
    };
  }
}
